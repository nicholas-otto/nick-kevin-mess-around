'use strict';

const escapeName = (name) => `${name}`.trim().replace(/([^a-z0-9\w-:/]+)/gi, "-");

const uploadFile = (e, editor) => {
  const files = e.dataTransfer ? e.dataTransfer.files : e.target.files;
  const formData = new FormData();
  for (const i in files) {
    formData.append("file-" + i, files[i]);
  }
  fetch("/api/builder/handle", { method: "POST", body: formData }).then((res) => res.json()).then((images) => {
    editor.AssetManager.add(images);
  });
};
const initEditor = async (isDev = true) => {
  const grapesjs = await Promise.resolve().then(function () { return require('./grapes.min-bf3b48dd.js'); });
  globalThis.grapesjs = grapesjs;
  if (isDev) {
    assetManagerOptions.uploadFile = (e) => uploadFile(e, editor);
    editorOptions.assetManager = assetManagerOptions;
  }
  var editor = grapesjs.init(editorOptions);
};
const assetManagerOptions = {
  storageType: "",
  storeOnChange: true,
  storeAfterUpload: true,
  assets: [],
  uploadFile
};
const editorOptions = {
  selectorManager: { escapeName },
  container: "#gjs",
  height: "100%",
  storageManager: { autoload: false },
  showDevices: false,
  traitsEditor: true,
  assetManager: assetManagerOptions
};

exports.initEditor = initEditor;
