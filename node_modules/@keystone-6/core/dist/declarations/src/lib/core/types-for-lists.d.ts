import { CacheHint } from 'apollo-server-types';
import { GraphQLTypesForList, NextFieldType, BaseListTypeInfo, ListHooks, KeystoneConfig, CacheHintArgs, MaybePromise } from '../../types';
import { FieldHooks } from '../../types/config/hooks';
import { FilterOrderArgs } from '../../types/config/fields';
import { ResolvedFieldAccessControl, ResolvedListAccessControl } from './access-control';
import { ResolvedDBField } from './resolve-relationships';
export declare type InitialisedField = Omit<NextFieldType, 'dbField' | 'access' | 'graphql'> & {
    dbField: ResolvedDBField;
    access: ResolvedFieldAccessControl;
    hooks: FieldHooks<BaseListTypeInfo>;
    graphql: {
        isEnabled: {
            read: boolean;
            create: boolean;
            update: boolean;
            filter: boolean | ((args: FilterOrderArgs<BaseListTypeInfo>) => MaybePromise<boolean>);
            orderBy: boolean | ((args: FilterOrderArgs<BaseListTypeInfo>) => MaybePromise<boolean>);
        };
        cacheHint?: CacheHint | undefined;
    };
};
export declare type InitialisedList = {
    fields: Record<string, InitialisedField>;
    /** This will include the opposites to one-sided relationships */
    resolvedDbFields: Record<string, ResolvedDBField>;
    pluralGraphQLName: string;
    types: GraphQLTypesForList;
    access: ResolvedListAccessControl;
    hooks: ListHooks<BaseListTypeInfo>;
    adminUILabels: {
        label: string;
        singular: string;
        plural: string;
        path: string;
    };
    cacheHint: ((args: CacheHintArgs) => CacheHint) | undefined;
    maxResults: number;
    listKey: string;
    lists: Record<string, InitialisedList>;
    dbMap: string | undefined;
    graphql: {
        isEnabled: {
            type: boolean;
            query: boolean;
            create: boolean;
            update: boolean;
            delete: boolean;
        };
    };
};
export declare function initialiseLists(config: KeystoneConfig): Record<string, InitialisedList>;
