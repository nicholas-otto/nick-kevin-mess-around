/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import type { GraphQLResolveInfo } from 'graphql';
import type { GqlNames } from './utils';
import type { KeystoneContext, SessionContext } from './context';
import { BaseKeystoneTypeInfo } from '.';
export declare type DatabaseProvider = 'sqlite' | 'postgresql';
export declare type CreateRequestContext<TypeInfo extends BaseKeystoneTypeInfo> = (req: IncomingMessage, res: ServerResponse) => Promise<KeystoneContext<TypeInfo>>;
export declare type CreateContext = (args: {
    sessionContext?: SessionContext<any>;
    sudo?: boolean;
    req?: IncomingMessage;
}) => KeystoneContext;
export declare type SessionImplementation = {
    createSessionContext(req: IncomingMessage, res: ServerResponse, createContext: CreateContext): Promise<SessionContext<any>>;
};
export declare type GraphQLResolver<Context extends KeystoneContext> = (root: any, args: any, context: Context, info: GraphQLResolveInfo) => any;
export declare type GraphQLSchemaExtension<Context extends KeystoneContext> = {
    typeDefs: string;
    resolvers: Record<string, Record<string, GraphQLResolver<Context>>>;
};
export declare function getGqlNames({ listKey, pluralGraphQLName, }: {
    listKey: string;
    pluralGraphQLName: string;
}): GqlNames;
