import { D as DateTime$2, a as Decimal$2 } from './graphql-ts-schema-ecd3b4c2.esm.js';
import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import 'decimal.js';
import '@graphql-tools/schema';
import { enum as enum$1, enumValues, inputObject, arg, list, nonNull, String as String$2, Boolean as Boolean$2, Int as Int$2, Float as Float$2 } from '@graphql-ts/schema/api-without-context';

const orderDirectionEnum = enum$1({
  name: 'OrderDirection',
  values: enumValues(['asc', 'desc'])
});
const QueryMode = enum$1({
  name: 'QueryMode',
  values: enumValues(['default', 'insensitive'])
});
// fieldType(dbField)(fieldInfo) => { ...fieldInfo, dbField };
function fieldType(dbField) {
  return function (graphQLInfo) {
    return _objectSpread(_objectSpread({}, graphQLInfo), {}, {
      dbField
    });
  };
}

// (even though, yes, having EnumFilter by defined as EnumNullableFilter<Enum>, would be the same type but names would show up differently in editors for example)

function enumFilters(enumType) {
  const optional = inputObject({
    name: `${enumType.graphQLType.name}NullableFilter`,
    fields: () => ({
      equals: arg({
        type: enumType
      }),
      in: arg({
        type: list(nonNull(enumType))
      }),
      notIn: arg({
        type: list(nonNull(enumType))
      }),
      not: arg({
        type: optional
      })
    })
  });
  const required = inputObject({
    name: `${enumType.graphQLType.name}Filter`,
    fields: () => ({
      equals: arg({
        type: enumType
      }),
      in: arg({
        type: list(nonNull(enumType))
      }),
      notIn: arg({
        type: list(nonNull(enumType))
      }),
      not: arg({
        type: optional
      })
    })
  });
  const many = inputObject({
    name: `${enumType.graphQLType.name}NullableListFilter`,
    fields: () => ({
      // can be null
      equals: arg({
        type: list(nonNull(enumType))
      }),
      // can be null
      has: arg({
        type: enumType
      }),
      hasEvery: arg({
        type: list(nonNull(enumType))
      }),
      hasSome: arg({
        type: list(nonNull(enumType))
      }),
      isEmpty: arg({
        type: enumType
      })
    })
  });
  return {
    optional,
    required,
    many
  };
}

// Do not manually modify this file, it is automatically generated by the package at /prisma-utils in this repo.
const StringNullableFilter$1 = inputObject({
  name: 'StringNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: String$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(String$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(String$2))
    }),
    lt: arg({
      type: String$2
    }),
    lte: arg({
      type: String$2
    }),
    gt: arg({
      type: String$2
    }),
    gte: arg({
      type: String$2
    }),
    contains: arg({
      type: String$2
    }),
    startsWith: arg({
      type: String$2
    }),
    endsWith: arg({
      type: String$2
    }),
    mode: arg({
      type: QueryMode
    }),
    // can be null
    not: arg({
      type: NestedStringNullableFilter$1
    })
  })
});
const NestedStringNullableFilter$1 = inputObject({
  name: 'NestedStringNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: String$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(String$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(String$2))
    }),
    lt: arg({
      type: String$2
    }),
    lte: arg({
      type: String$2
    }),
    gt: arg({
      type: String$2
    }),
    gte: arg({
      type: String$2
    }),
    contains: arg({
      type: String$2
    }),
    startsWith: arg({
      type: String$2
    }),
    endsWith: arg({
      type: String$2
    }),
    // can be null
    not: arg({
      type: NestedStringNullableFilter$1
    })
  })
});
const StringFilter$1 = inputObject({
  name: 'StringFilter',
  fields: () => ({
    equals: arg({
      type: String$2
    }),
    in: arg({
      type: list(nonNull(String$2))
    }),
    notIn: arg({
      type: list(nonNull(String$2))
    }),
    lt: arg({
      type: String$2
    }),
    lte: arg({
      type: String$2
    }),
    gt: arg({
      type: String$2
    }),
    gte: arg({
      type: String$2
    }),
    contains: arg({
      type: String$2
    }),
    startsWith: arg({
      type: String$2
    }),
    endsWith: arg({
      type: String$2
    }),
    mode: arg({
      type: QueryMode
    }),
    not: arg({
      type: NestedStringFilter$1
    })
  })
});
const NestedStringFilter$1 = inputObject({
  name: 'NestedStringFilter',
  fields: () => ({
    equals: arg({
      type: String$2
    }),
    in: arg({
      type: list(nonNull(String$2))
    }),
    notIn: arg({
      type: list(nonNull(String$2))
    }),
    lt: arg({
      type: String$2
    }),
    lte: arg({
      type: String$2
    }),
    gt: arg({
      type: String$2
    }),
    gte: arg({
      type: String$2
    }),
    contains: arg({
      type: String$2
    }),
    startsWith: arg({
      type: String$2
    }),
    endsWith: arg({
      type: String$2
    }),
    not: arg({
      type: NestedStringFilter$1
    })
  })
});
const StringNullableListFilter = inputObject({
  name: 'StringNullableListFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: list(nonNull(String$2))
    }),
    // can be null
    has: arg({
      type: String$2
    }),
    hasEvery: arg({
      type: list(nonNull(String$2))
    }),
    hasSome: arg({
      type: list(nonNull(String$2))
    }),
    isEmpty: arg({
      type: Boolean$2
    })
  })
});
const BoolNullableFilter$1 = inputObject({
  name: 'BooleanNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: Boolean$2
    }),
    // can be null
    not: arg({
      type: BoolNullableFilter$1
    })
  })
});
const BoolFilter$1 = inputObject({
  name: 'BooleanFilter',
  fields: () => ({
    equals: arg({
      type: Boolean$2
    }),
    not: arg({
      type: BoolFilter$1
    })
  })
});
const BoolNullableListFilter = inputObject({
  name: 'BooleanNullableListFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: list(nonNull(Boolean$2))
    }),
    // can be null
    has: arg({
      type: Boolean$2
    }),
    hasEvery: arg({
      type: list(nonNull(Boolean$2))
    }),
    hasSome: arg({
      type: list(nonNull(Boolean$2))
    }),
    isEmpty: arg({
      type: Boolean$2
    })
  })
});
const IntNullableFilter$1 = inputObject({
  name: 'IntNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: Int$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(Int$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(Int$2))
    }),
    lt: arg({
      type: Int$2
    }),
    lte: arg({
      type: Int$2
    }),
    gt: arg({
      type: Int$2
    }),
    gte: arg({
      type: Int$2
    }),
    // can be null
    not: arg({
      type: IntNullableFilter$1
    })
  })
});
const IntFilter$1 = inputObject({
  name: 'IntFilter',
  fields: () => ({
    equals: arg({
      type: Int$2
    }),
    in: arg({
      type: list(nonNull(Int$2))
    }),
    notIn: arg({
      type: list(nonNull(Int$2))
    }),
    lt: arg({
      type: Int$2
    }),
    lte: arg({
      type: Int$2
    }),
    gt: arg({
      type: Int$2
    }),
    gte: arg({
      type: Int$2
    }),
    not: arg({
      type: IntFilter$1
    })
  })
});
const IntNullableListFilter = inputObject({
  name: 'IntNullableListFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: list(nonNull(Int$2))
    }),
    // can be null
    has: arg({
      type: Int$2
    }),
    hasEvery: arg({
      type: list(nonNull(Int$2))
    }),
    hasSome: arg({
      type: list(nonNull(Int$2))
    }),
    isEmpty: arg({
      type: Boolean$2
    })
  })
});
const FloatNullableFilter$1 = inputObject({
  name: 'FloatNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: Float$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(Float$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(Float$2))
    }),
    lt: arg({
      type: Float$2
    }),
    lte: arg({
      type: Float$2
    }),
    gt: arg({
      type: Float$2
    }),
    gte: arg({
      type: Float$2
    }),
    // can be null
    not: arg({
      type: FloatNullableFilter$1
    })
  })
});
const FloatFilter$1 = inputObject({
  name: 'FloatFilter',
  fields: () => ({
    equals: arg({
      type: Float$2
    }),
    in: arg({
      type: list(nonNull(Float$2))
    }),
    notIn: arg({
      type: list(nonNull(Float$2))
    }),
    lt: arg({
      type: Float$2
    }),
    lte: arg({
      type: Float$2
    }),
    gt: arg({
      type: Float$2
    }),
    gte: arg({
      type: Float$2
    }),
    not: arg({
      type: FloatFilter$1
    })
  })
});
const FloatNullableListFilter = inputObject({
  name: 'FloatNullableListFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: list(nonNull(Float$2))
    }),
    // can be null
    has: arg({
      type: Float$2
    }),
    hasEvery: arg({
      type: list(nonNull(Float$2))
    }),
    hasSome: arg({
      type: list(nonNull(Float$2))
    }),
    isEmpty: arg({
      type: Boolean$2
    })
  })
});
const DateTimeNullableFilter$1 = inputObject({
  name: 'DateTimeNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: DateTime$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(DateTime$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(DateTime$2))
    }),
    lt: arg({
      type: DateTime$2
    }),
    lte: arg({
      type: DateTime$2
    }),
    gt: arg({
      type: DateTime$2
    }),
    gte: arg({
      type: DateTime$2
    }),
    // can be null
    not: arg({
      type: DateTimeNullableFilter$1
    })
  })
});
const DateTimeFilter$1 = inputObject({
  name: 'DateTimeFilter',
  fields: () => ({
    equals: arg({
      type: DateTime$2
    }),
    in: arg({
      type: list(nonNull(DateTime$2))
    }),
    notIn: arg({
      type: list(nonNull(DateTime$2))
    }),
    lt: arg({
      type: DateTime$2
    }),
    lte: arg({
      type: DateTime$2
    }),
    gt: arg({
      type: DateTime$2
    }),
    gte: arg({
      type: DateTime$2
    }),
    not: arg({
      type: DateTimeFilter$1
    })
  })
});
const DateTimeNullableListFilter = inputObject({
  name: 'DateTimeNullableListFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: list(nonNull(DateTime$2))
    }),
    // can be null
    has: arg({
      type: DateTime$2
    }),
    hasEvery: arg({
      type: list(nonNull(DateTime$2))
    }),
    hasSome: arg({
      type: list(nonNull(DateTime$2))
    }),
    isEmpty: arg({
      type: Boolean$2
    })
  })
});
const DecimalNullableFilter$1 = inputObject({
  name: 'DecimalNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: Decimal$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(Decimal$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(Decimal$2))
    }),
    lt: arg({
      type: Decimal$2
    }),
    lte: arg({
      type: Decimal$2
    }),
    gt: arg({
      type: Decimal$2
    }),
    gte: arg({
      type: Decimal$2
    }),
    // can be null
    not: arg({
      type: DecimalNullableFilter$1
    })
  })
});
const DecimalFilter$1 = inputObject({
  name: 'DecimalFilter',
  fields: () => ({
    equals: arg({
      type: Decimal$2
    }),
    in: arg({
      type: list(nonNull(Decimal$2))
    }),
    notIn: arg({
      type: list(nonNull(Decimal$2))
    }),
    lt: arg({
      type: Decimal$2
    }),
    lte: arg({
      type: Decimal$2
    }),
    gt: arg({
      type: Decimal$2
    }),
    gte: arg({
      type: Decimal$2
    }),
    not: arg({
      type: DecimalFilter$1
    })
  })
});
const DecimalNullableListFilter = inputObject({
  name: 'DecimalNullableListFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: list(nonNull(Decimal$2))
    }),
    // can be null
    has: arg({
      type: Decimal$2
    }),
    hasEvery: arg({
      type: list(nonNull(Decimal$2))
    }),
    hasSome: arg({
      type: list(nonNull(Decimal$2))
    }),
    isEmpty: arg({
      type: Boolean$2
    })
  })
});
const String$1 = {
  optional: StringNullableFilter$1,
  required: StringFilter$1,
  many: StringNullableListFilter
};
const Boolean$1 = {
  optional: BoolNullableFilter$1,
  required: BoolFilter$1,
  many: BoolNullableListFilter
};
const Int$1 = {
  optional: IntNullableFilter$1,
  required: IntFilter$1,
  many: IntNullableListFilter
};
const Float$1 = {
  optional: FloatNullableFilter$1,
  required: FloatFilter$1,
  many: FloatNullableListFilter
};
const DateTime$1 = {
  optional: DateTimeNullableFilter$1,
  required: DateTimeFilter$1,
  many: DateTimeNullableListFilter
};
const Decimal$1 = {
  optional: DecimalNullableFilter$1,
  required: DecimalFilter$1,
  many: DecimalNullableListFilter
};

var postgresql = /*#__PURE__*/Object.freeze({
  __proto__: null,
  String: String$1,
  Boolean: Boolean$1,
  Int: Int$1,
  Float: Float$1,
  DateTime: DateTime$1,
  Decimal: Decimal$1,
  'enum': enumFilters
});

// Do not manually modify this file, it is automatically generated by the package at /prisma-utils in this repo.
const StringNullableFilter = inputObject({
  name: 'StringNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: String$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(String$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(String$2))
    }),
    lt: arg({
      type: String$2
    }),
    lte: arg({
      type: String$2
    }),
    gt: arg({
      type: String$2
    }),
    gte: arg({
      type: String$2
    }),
    contains: arg({
      type: String$2
    }),
    startsWith: arg({
      type: String$2
    }),
    endsWith: arg({
      type: String$2
    }),
    // can be null
    not: arg({
      type: NestedStringNullableFilter
    })
  })
});
const NestedStringNullableFilter = inputObject({
  name: 'NestedStringNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: String$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(String$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(String$2))
    }),
    lt: arg({
      type: String$2
    }),
    lte: arg({
      type: String$2
    }),
    gt: arg({
      type: String$2
    }),
    gte: arg({
      type: String$2
    }),
    contains: arg({
      type: String$2
    }),
    startsWith: arg({
      type: String$2
    }),
    endsWith: arg({
      type: String$2
    }),
    // can be null
    not: arg({
      type: NestedStringNullableFilter
    })
  })
});
const StringFilter = inputObject({
  name: 'StringFilter',
  fields: () => ({
    equals: arg({
      type: String$2
    }),
    in: arg({
      type: list(nonNull(String$2))
    }),
    notIn: arg({
      type: list(nonNull(String$2))
    }),
    lt: arg({
      type: String$2
    }),
    lte: arg({
      type: String$2
    }),
    gt: arg({
      type: String$2
    }),
    gte: arg({
      type: String$2
    }),
    contains: arg({
      type: String$2
    }),
    startsWith: arg({
      type: String$2
    }),
    endsWith: arg({
      type: String$2
    }),
    not: arg({
      type: NestedStringFilter
    })
  })
});
const NestedStringFilter = inputObject({
  name: 'NestedStringFilter',
  fields: () => ({
    equals: arg({
      type: String$2
    }),
    in: arg({
      type: list(nonNull(String$2))
    }),
    notIn: arg({
      type: list(nonNull(String$2))
    }),
    lt: arg({
      type: String$2
    }),
    lte: arg({
      type: String$2
    }),
    gt: arg({
      type: String$2
    }),
    gte: arg({
      type: String$2
    }),
    contains: arg({
      type: String$2
    }),
    startsWith: arg({
      type: String$2
    }),
    endsWith: arg({
      type: String$2
    }),
    not: arg({
      type: NestedStringFilter
    })
  })
});
const BoolNullableFilter = inputObject({
  name: 'BooleanNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: Boolean$2
    }),
    // can be null
    not: arg({
      type: BoolNullableFilter
    })
  })
});
const BoolFilter = inputObject({
  name: 'BooleanFilter',
  fields: () => ({
    equals: arg({
      type: Boolean$2
    }),
    not: arg({
      type: BoolFilter
    })
  })
});
const IntNullableFilter = inputObject({
  name: 'IntNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: Int$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(Int$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(Int$2))
    }),
    lt: arg({
      type: Int$2
    }),
    lte: arg({
      type: Int$2
    }),
    gt: arg({
      type: Int$2
    }),
    gte: arg({
      type: Int$2
    }),
    // can be null
    not: arg({
      type: IntNullableFilter
    })
  })
});
const IntFilter = inputObject({
  name: 'IntFilter',
  fields: () => ({
    equals: arg({
      type: Int$2
    }),
    in: arg({
      type: list(nonNull(Int$2))
    }),
    notIn: arg({
      type: list(nonNull(Int$2))
    }),
    lt: arg({
      type: Int$2
    }),
    lte: arg({
      type: Int$2
    }),
    gt: arg({
      type: Int$2
    }),
    gte: arg({
      type: Int$2
    }),
    not: arg({
      type: IntFilter
    })
  })
});
const FloatNullableFilter = inputObject({
  name: 'FloatNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: Float$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(Float$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(Float$2))
    }),
    lt: arg({
      type: Float$2
    }),
    lte: arg({
      type: Float$2
    }),
    gt: arg({
      type: Float$2
    }),
    gte: arg({
      type: Float$2
    }),
    // can be null
    not: arg({
      type: FloatNullableFilter
    })
  })
});
const FloatFilter = inputObject({
  name: 'FloatFilter',
  fields: () => ({
    equals: arg({
      type: Float$2
    }),
    in: arg({
      type: list(nonNull(Float$2))
    }),
    notIn: arg({
      type: list(nonNull(Float$2))
    }),
    lt: arg({
      type: Float$2
    }),
    lte: arg({
      type: Float$2
    }),
    gt: arg({
      type: Float$2
    }),
    gte: arg({
      type: Float$2
    }),
    not: arg({
      type: FloatFilter
    })
  })
});
const DateTimeNullableFilter = inputObject({
  name: 'DateTimeNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: DateTime$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(DateTime$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(DateTime$2))
    }),
    lt: arg({
      type: DateTime$2
    }),
    lte: arg({
      type: DateTime$2
    }),
    gt: arg({
      type: DateTime$2
    }),
    gte: arg({
      type: DateTime$2
    }),
    // can be null
    not: arg({
      type: DateTimeNullableFilter
    })
  })
});
const DateTimeFilter = inputObject({
  name: 'DateTimeFilter',
  fields: () => ({
    equals: arg({
      type: DateTime$2
    }),
    in: arg({
      type: list(nonNull(DateTime$2))
    }),
    notIn: arg({
      type: list(nonNull(DateTime$2))
    }),
    lt: arg({
      type: DateTime$2
    }),
    lte: arg({
      type: DateTime$2
    }),
    gt: arg({
      type: DateTime$2
    }),
    gte: arg({
      type: DateTime$2
    }),
    not: arg({
      type: DateTimeFilter
    })
  })
});
const DecimalNullableFilter = inputObject({
  name: 'DecimalNullableFilter',
  fields: () => ({
    // can be null
    equals: arg({
      type: Decimal$2
    }),
    // can be null
    in: arg({
      type: list(nonNull(Decimal$2))
    }),
    // can be null
    notIn: arg({
      type: list(nonNull(Decimal$2))
    }),
    lt: arg({
      type: Decimal$2
    }),
    lte: arg({
      type: Decimal$2
    }),
    gt: arg({
      type: Decimal$2
    }),
    gte: arg({
      type: Decimal$2
    }),
    // can be null
    not: arg({
      type: DecimalNullableFilter
    })
  })
});
const DecimalFilter = inputObject({
  name: 'DecimalFilter',
  fields: () => ({
    equals: arg({
      type: Decimal$2
    }),
    in: arg({
      type: list(nonNull(Decimal$2))
    }),
    notIn: arg({
      type: list(nonNull(Decimal$2))
    }),
    lt: arg({
      type: Decimal$2
    }),
    lte: arg({
      type: Decimal$2
    }),
    gt: arg({
      type: Decimal$2
    }),
    gte: arg({
      type: Decimal$2
    }),
    not: arg({
      type: DecimalFilter
    })
  })
});
const String = {
  optional: StringNullableFilter,
  required: StringFilter
};
const Boolean = {
  optional: BoolNullableFilter,
  required: BoolFilter
};
const Int = {
  optional: IntNullableFilter,
  required: IntFilter
};
const Float = {
  optional: FloatNullableFilter,
  required: FloatFilter
};
const DateTime = {
  optional: DateTimeNullableFilter,
  required: DateTimeFilter
};
const Decimal = {
  optional: DecimalNullableFilter,
  required: DecimalFilter
};

var sqlite = /*#__PURE__*/Object.freeze({
  __proto__: null,
  String: String,
  Boolean: Boolean,
  Int: Int,
  Float: Float,
  DateTime: DateTime,
  Decimal: Decimal,
  'enum': enumFilters
});

export { QueryMode as Q, fieldType as f, orderDirectionEnum as o, postgresql as p, sqlite as s };
