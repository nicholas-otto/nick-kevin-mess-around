'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var path = require('path');
var crypto = require('crypto');
var fs = require('fs');
var supertest = require('supertest');
var memoizeOne = require('memoize-one');
var artifacts_dist_keystone6CoreArtifacts = require('../../dist/artifacts-61fd8d1d.cjs.dev.js');
var migrations = require('../../dist/migrations-4046167a.cjs.dev.js');
var initConfig = require('../../dist/initConfig-64706830.cjs.dev.js');
var createAdminUIMiddleware = require('../../dist/createAdminUIMiddleware-c6643ddf.cjs.dev.js');
require('apollo-server-micro');
require('apollo-server-express');
require('apollo-server-core');
require('@babel/runtime/helpers/objectWithoutProperties');
require('cookie');
require('@hapi/iron');
require('uid-safe');
require('graphql');
require('fs-extra');
require('@prisma/sdk');
require('prettier');
require('../../dist/utils-36b85180.cjs.dev.js');
require('prompts');
require('@babel/runtime/helpers/defineProperty');
require('../../dist/core-3a9d46a1.cjs.dev.js');
require('../../dist/sqlite-e78b3d45.cjs.dev.js');
require('../../dist/graphql-ts-schema-45e537ad.cjs.dev.js');
require('@graphql-ts/schema');
require('graphql-type-json');
require('graphql-upload/public/GraphQLUpload.js');
require('decimal.js');
require('@graphql-ts/schema/api-without-context');
require('@graphql-ts/extend');
require('@graphql-ts/schema/api-with-context');
require('@graphql-tools/schema');
require('../../dist/types-for-lists-aa4823f2.cjs.dev.js');
require('graphql/execution/values');
require('../../dist/graphql-errors-2ad531f4.cjs.dev.js');
require('apollo-server-errors');
require('pluralize');
require('@prisma/migrate');
require('chalk');
require('@sindresorhus/slugify');
require('p-limit');
require('util');
require('resolve');
require('@nodelib/fs.walk');
require('@emotion/hash');
require('../../dist/admin-meta-graphql-646e7d45.cjs.dev.js');
require('@apollo/client');
require('@babel/runtime/helpers/classPrivateFieldInitSpec');
require('@babel/runtime/helpers/classPrivateFieldGet');
require('@babel/runtime/helpers/classPrivateFieldSet');
require('uuid');
require('image-type');
require('image-size');
require('../../fields/types/image/utils/dist/keystone-6-core-fields-types-image-utils.cjs.dev.js');
require('stream');
require('filenamify');
require('../../fields/types/file/utils/dist/keystone-6-core-fields-types-file-utils.cjs.dev.js');
require('node-fetch');
require('form-data');
require('cuid');
require('../../dist/package-path-2f19a22b.cjs.dev.js');
require('http');
require('cors');
require('express');
require('graphql-upload');
require('../../session/dist/keystone-6-core-session.cjs.dev.js');
require('../../dist/createApolloServer-220df9cc.cjs.dev.js');
require('url');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefault(path);
var crypto__default = /*#__PURE__*/_interopDefault(crypto);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var supertest__default = /*#__PURE__*/_interopDefault(supertest);
var memoizeOne__default = /*#__PURE__*/_interopDefault(memoizeOne);

const _hashPrismaSchema = memoizeOne__default["default"](prismaSchema => crypto__default["default"].createHash('md5').update(prismaSchema).digest('hex'));

const _alreadyGeneratedProjects = new Set();

async function setupTestEnv(_ref) {
  let {
    config: _config
  } = _ref;
  // Force the UI to always be disabled.
  const config = initConfig.initConfig(_objectSpread(_objectSpread({}, _config), {}, {
    ui: _objectSpread(_objectSpread({}, _config.ui), {}, {
      isDisabled: true
    })
  }));
  const {
    graphQLSchema,
    getKeystone
  } = initConfig.createSystem(config);
  const artifacts = await artifacts_dist_keystone6CoreArtifacts.getCommittedArtifacts(graphQLSchema, config);

  const hash = _hashPrismaSchema(artifacts.prisma);

  const artifactPath = path__default["default"].resolve('.keystone', 'tests', hash);

  if (!_alreadyGeneratedProjects.has(hash)) {
    _alreadyGeneratedProjects.add(hash);

    fs__default["default"].mkdirSync(artifactPath, {
      recursive: true
    });
    await artifacts_dist_keystone6CoreArtifacts.writeCommittedArtifacts(artifacts, artifactPath);
    await artifacts_dist_keystone6CoreArtifacts.generateNodeModulesArtifacts(graphQLSchema, config, artifactPath);
  }

  await migrations.pushPrismaSchemaToDatabase(config.db.url, artifacts.prisma, path__default["default"].join(artifactPath, 'schema.prisma'), true // shouldDropDatabase
  );
  const {
    connect,
    disconnect,
    createContext
  } = getKeystone(artifacts_dist_keystone6CoreArtifacts.requirePrismaClient(artifactPath));
  const {
    expressServer: app,
    apolloServer,
    httpServer: server
  } = await createAdminUIMiddleware.createExpressServer(config, graphQLSchema, createContext);

  const graphQLRequest = _ref2 => {
    var _config$graphql;

    let {
      query,
      variables = undefined,
      operationName
    } = _ref2;
    return supertest__default["default"](app).post(((_config$graphql = config.graphql) === null || _config$graphql === void 0 ? void 0 : _config$graphql.path) || '/api/graphql').send({
      query,
      variables,
      operationName
    }).set('Accept', 'application/json');
  };

  return {
    connect,
    disconnect: async () => {
      await Promise.all([disconnect(), apolloServer.stop()]);
    },
    testArgs: {
      context: createContext(),
      graphQLRequest,
      app,
      server
    }
  };
}
function setupTestRunner(_ref3) {
  let {
    config
  } = _ref3;
  return testFn => async () => {
    // Reset the database to be empty for every test.
    const {
      connect,
      disconnect,
      testArgs
    } = await setupTestEnv({
      config
    });
    await connect();

    try {
      return await testFn(testArgs);
    } finally {
      await disconnect();
    }
  };
}

exports.setupTestEnv = setupTestEnv;
exports.setupTestRunner = setupTestRunner;
