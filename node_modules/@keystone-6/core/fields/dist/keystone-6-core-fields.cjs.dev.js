'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var graphqlErrors = require('../../dist/graphql-errors-2ad531f4.cjs.dev.js');
var sqlite = require('../../dist/sqlite-e78b3d45.cjs.dev.js');
var jsonFieldTypePolyfillForSqlite = require('../../dist/json-field-type-polyfill-for-sqlite-e4029815.cjs.dev.js');
var graphqlTsSchema = require('../../dist/graphql-ts-schema-45e537ad.cjs.dev.js');
require('@graphql-tools/schema');
var path = require('path');
var packagePath = require('../../dist/package-path-2f19a22b.cjs.dev.js');
var apiWithoutContext = require('@graphql-ts/schema/api-without-context');
var apiWithContext = require('@graphql-ts/schema/api-with-context');
var Decimal = require('decimal.js');
var fields_types_file_utils_dist_keystone6CoreFieldsTypesFileUtils = require('../types/file/utils/dist/keystone-6-core-fields-types-file-utils.cjs.dev.js');
var fields_types_image_utils_dist_keystone6CoreFieldsTypesImageUtils = require('../types/image/utils/dist/keystone-6-core-fields-types-image-utils.cjs.dev.js');
var bcryptjs = require('bcryptjs');
var dumbPasswords = require('dumb-passwords');
var inflection = require('inflection');
var graphql = require('graphql');
var core = require('../../dist/core-3a9d46a1.cjs.dev.js');
require('apollo-server-errors');
require('@graphql-ts/schema');
require('graphql-type-json');
require('graphql-upload/public/GraphQLUpload.js');
require('@graphql-ts/extend');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefault(path);
var Decimal__default = /*#__PURE__*/_interopDefault(Decimal);
var bcryptjs__default = /*#__PURE__*/_interopDefault(bcryptjs);
var dumbPasswords__default = /*#__PURE__*/_interopDefault(dumbPasswords);
var inflection__default = /*#__PURE__*/_interopDefault(inflection);

function hasReadAccessControl(access) {
  if (access === undefined) {
    return false;
  }

  return typeof access === 'function' || typeof access.read === 'function';
}
function hasCreateAccessControl(access) {
  if (access === undefined) {
    return false;
  }

  return typeof access === 'function' || typeof access.create === 'function';
}
function getResolvedIsNullable(validation, db) {
  if ((db === null || db === void 0 ? void 0 : db.isNullable) === false) {
    return false;
  }

  if ((db === null || db === void 0 ? void 0 : db.isNullable) === undefined && validation !== null && validation !== void 0 && validation.isRequired) {
    return false;
  }

  return true;
}
function assertReadIsNonNullAllowed(meta, config, resolvedIsNullable) {
  var _config$graphql, _config$graphql$read;

  if ((_config$graphql = config.graphql) !== null && _config$graphql !== void 0 && (_config$graphql$read = _config$graphql.read) !== null && _config$graphql$read !== void 0 && _config$graphql$read.isNonNull) {
    if (resolvedIsNullable) {
      throw new Error(`The field at ${meta.listKey}.${meta.fieldKey} sets graphql.read.isNonNull: true but not validation.isRequired: true or db.isNullable: false.\n` + `Set validation.isRequired: true or db.isNullable: false or disable graphql.read.isNonNull`);
    }

    if (hasReadAccessControl(config.access)) {
      throw new Error(`The field at ${meta.listKey}.${meta.fieldKey} sets graphql.read.isNonNull: true and has read access control, this is not allowed.\n` + 'Either disable graphql.read.isNonNull or read access control.');
    }
  }
}
function assertCreateIsNonNullAllowed(meta, config) {
  var _config$graphql2, _config$graphql2$crea;

  if ((_config$graphql2 = config.graphql) !== null && _config$graphql2 !== void 0 && (_config$graphql2$crea = _config$graphql2.create) !== null && _config$graphql2$crea !== void 0 && _config$graphql2$crea.isNonNull && hasCreateAccessControl(config.access)) {
    throw new Error(`The field at ${meta.listKey}.${meta.fieldKey} sets graphql.create.isNonNull: true and has create access control, this is not allowed.\n` + 'Either disable graphql.create.isNonNull or create access control.');
  }
}

const resolveView = pathname => path__default["default"].join(packagePath.packagePath, 'fields', 'types', pathname);

const _excluded$a = ["defaultValue"];
const checkbox = function () {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  let {
    defaultValue = false
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$a);

  return meta => {
    var _config$db, _config$graphql, _config$graphql$creat, _config$graphql2, _config$graphql2$crea, _config$graphql3, _config$graphql3$read;

    if (config.isIndexed === 'unique') {
      throw Error("isIndexed: 'unique' is not a supported option for field type checkbox");
    }

    assertReadIsNonNullAllowed(meta, config, false);
    assertCreateIsNonNullAllowed(meta, config);
    return sqlite.fieldType({
      kind: 'scalar',
      mode: 'required',
      scalar: 'Boolean',
      default: {
        kind: 'literal',
        value: defaultValue
      },
      map: (_config$db = config.db) === null || _config$db === void 0 ? void 0 : _config$db.map
    })(_objectSpread(_objectSpread({}, config), {}, {
      input: {
        where: {
          arg: apiWithoutContext.arg({
            type: jsonFieldTypePolyfillForSqlite.filters[meta.provider].Boolean.required
          })
        },
        create: {
          arg: apiWithoutContext.arg({
            type: (_config$graphql = config.graphql) !== null && _config$graphql !== void 0 && (_config$graphql$creat = _config$graphql.create) !== null && _config$graphql$creat !== void 0 && _config$graphql$creat.isNonNull ? apiWithoutContext.nonNull(apiWithoutContext.Boolean) : apiWithoutContext.Boolean,
            defaultValue: (_config$graphql2 = config.graphql) !== null && _config$graphql2 !== void 0 && (_config$graphql2$crea = _config$graphql2.create) !== null && _config$graphql2$crea !== void 0 && _config$graphql2$crea.isNonNull ? defaultValue : undefined
          }),

          resolve(val) {
            if (val === null) {
              throw graphqlErrors.userInputError('Checkbox fields cannot be set to null');
            }

            return val !== null && val !== void 0 ? val : defaultValue;
          }

        },
        update: {
          arg: apiWithoutContext.arg({
            type: apiWithoutContext.Boolean
          }),

          resolve(val) {
            if (val === null) {
              throw graphqlErrors.userInputError('Checkbox fields cannot be set to null');
            }

            return val;
          }

        },
        orderBy: {
          arg: apiWithoutContext.arg({
            type: sqlite.orderDirectionEnum
          })
        }
      },
      output: apiWithContext.field({
        type: (_config$graphql3 = config.graphql) !== null && _config$graphql3 !== void 0 && (_config$graphql3$read = _config$graphql3.read) !== null && _config$graphql3$read !== void 0 && _config$graphql3$read.isNonNull ? apiWithoutContext.nonNull(apiWithoutContext.Boolean) : apiWithoutContext.Boolean
      }),
      views: resolveView('checkbox/views'),
      getAdminMeta: () => ({
        defaultValue
      })
    }));
  };
};

const _excluded$9 = ["isIndexed", "precision", "scale", "validation", "defaultValue"];

function parseDecimalValueOption(meta, value, name) {
  let decimal;

  try {
    decimal = new Decimal__default["default"](value);
  } catch (err) {
    throw new Error(`The decimal field at ${meta.listKey}.${meta.fieldKey} specifies ${name}: ${value}, this is not valid decimal value.`);
  }

  if (!decimal.isFinite()) {
    throw new Error(`The decimal field at ${meta.listKey}.${meta.fieldKey} specifies ${name}: ${value} which is not finite but ${name} must be finite.`);
  }

  return decimal;
}

const decimal = function () {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  let {
    isIndexed,
    precision = 18,
    scale = 4,
    validation,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$9);

  return meta => {
    var _config$label, _config$db, _config$graphql, _config$graphql$creat, _config$graphql2, _config$graphql2$crea, _config$graphql3, _config$graphql3$read;

    if (meta.provider === 'sqlite') {
      throw new Error('The decimal field does not support sqlite');
    }

    if (!Number.isInteger(scale)) {
      throw new Error(`The scale for decimal fields must be an integer but the scale for the decimal field at ${meta.listKey}.${meta.fieldKey} is not an integer`);
    }

    if (!Number.isInteger(precision)) {
      throw new Error(`The precision for decimal fields must be an integer but the precision for the decimal field at ${meta.listKey}.${meta.fieldKey} is not an integer`);
    }

    if (scale > precision) {
      throw new Error(`The scale configured for decimal field at ${meta.listKey}.${meta.fieldKey} (${scale}) ` + `must not be larger than the field's precision (${precision})`);
    }

    const fieldLabel = (_config$label = config.label) !== null && _config$label !== void 0 ? _config$label : graphqlErrors.humanize(meta.fieldKey);
    const max = (validation === null || validation === void 0 ? void 0 : validation.max) === undefined ? undefined : parseDecimalValueOption(meta, validation.max, 'validation.max');
    const min = (validation === null || validation === void 0 ? void 0 : validation.max) === undefined ? undefined : parseDecimalValueOption(meta, validation.max, 'validation.max');

    if (min !== undefined && max !== undefined && max.lessThan(min)) {
      throw new Error(`The decimal field at ${meta.listKey}.${meta.fieldKey} specifies a validation.max that is less than the validation.min, and therefore has no valid options`);
    }

    const parsedDefaultValue = defaultValue === undefined ? undefined : parseDecimalValueOption(meta, defaultValue, 'defaultValue');
    const isNullable = getResolvedIsNullable(validation, config.db);
    assertReadIsNonNullAllowed(meta, config, isNullable);
    assertCreateIsNonNullAllowed(meta, config);
    const mode = isNullable === false ? 'required' : 'optional';
    const index = isIndexed === true ? 'index' : isIndexed || undefined;
    const dbField = {
      kind: 'scalar',
      mode,
      scalar: 'Decimal',
      nativeType: `Decimal(${precision}, ${scale})`,
      index,
      default: defaultValue === undefined ? undefined : {
        kind: 'literal',
        value: defaultValue
      },
      map: (_config$db = config.db) === null || _config$db === void 0 ? void 0 : _config$db.map
    };
    return sqlite.fieldType(dbField)(_objectSpread(_objectSpread({}, config), {}, {
      hooks: _objectSpread(_objectSpread({}, config.hooks), {}, {
        async validateInput(args) {
          var _config$hooks, _config$hooks$validat;

          const val = args.resolvedData[meta.fieldKey];

          if (val === null && (validation !== null && validation !== void 0 && validation.isRequired || isNullable === false)) {
            args.addValidationError(`${fieldLabel} is required`);
          }

          if (val != null) {
            if (min !== undefined && val.lessThan(min)) {
              args.addValidationError(`${fieldLabel} must be greater than or equal to ${min}`);
            }

            if (max !== undefined && val.greaterThan(max)) {
              args.addValidationError(`${fieldLabel} must be less than or equal to ${max}`);
            }
          }

          await ((_config$hooks = config.hooks) === null || _config$hooks === void 0 ? void 0 : (_config$hooks$validat = _config$hooks.validateInput) === null || _config$hooks$validat === void 0 ? void 0 : _config$hooks$validat.call(_config$hooks, args));
        }

      }),
      input: {
        uniqueWhere: isIndexed === 'unique' ? {
          arg: apiWithoutContext.arg({
            type: graphqlTsSchema.Decimal
          })
        } : undefined,
        where: {
          arg: apiWithoutContext.arg({
            type: jsonFieldTypePolyfillForSqlite.filters[meta.provider].Decimal[mode]
          }),
          resolve: mode === 'optional' ? jsonFieldTypePolyfillForSqlite.resolveCommon : undefined
        },
        create: {
          arg: apiWithoutContext.arg({
            type: (_config$graphql = config.graphql) !== null && _config$graphql !== void 0 && (_config$graphql$creat = _config$graphql.create) !== null && _config$graphql$creat !== void 0 && _config$graphql$creat.isNonNull ? apiWithoutContext.nonNull(graphqlTsSchema.Decimal) : graphqlTsSchema.Decimal,
            defaultValue: (_config$graphql2 = config.graphql) !== null && _config$graphql2 !== void 0 && (_config$graphql2$crea = _config$graphql2.create) !== null && _config$graphql2$crea !== void 0 && _config$graphql2$crea.isNonNull ? parsedDefaultValue : undefined
          }),

          resolve(val) {
            if (val === undefined) {
              return parsedDefaultValue !== null && parsedDefaultValue !== void 0 ? parsedDefaultValue : null;
            }

            return val;
          }

        },
        update: {
          arg: apiWithoutContext.arg({
            type: graphqlTsSchema.Decimal
          })
        },
        orderBy: {
          arg: apiWithoutContext.arg({
            type: sqlite.orderDirectionEnum
          })
        }
      },
      output: apiWithContext.field({
        type: (_config$graphql3 = config.graphql) !== null && _config$graphql3 !== void 0 && (_config$graphql3$read = _config$graphql3.read) !== null && _config$graphql3$read !== void 0 && _config$graphql3$read.isNonNull ? apiWithoutContext.nonNull(graphqlTsSchema.Decimal) : graphqlTsSchema.Decimal,

        resolve(_ref2) {
          let {
            value
          } = _ref2;

          if (value === null) {
            return null;
          }

          const val = new Decimal__default["default"](value);
          val.scaleToPrint = scale;
          return val;
        }

      }),
      views: resolveView('decimal/views'),
      getAdminMeta: () => {
        var _validation$isRequire, _validation$max, _validation$min;

        return {
          defaultValue: defaultValue !== null && defaultValue !== void 0 ? defaultValue : null,
          precision,
          scale,
          validation: {
            isRequired: (_validation$isRequire = validation === null || validation === void 0 ? void 0 : validation.isRequired) !== null && _validation$isRequire !== void 0 ? _validation$isRequire : false,
            max: (_validation$max = validation === null || validation === void 0 ? void 0 : validation.max) !== null && _validation$max !== void 0 ? _validation$max : null,
            min: (_validation$min = validation === null || validation === void 0 ? void 0 : validation.min) !== null && _validation$min !== void 0 ? _validation$min : null
          }
        };
      }
    }));
  };
};

const FileFieldInput = apiWithoutContext.inputObject({
  name: 'FileFieldInput',
  fields: {
    upload: apiWithoutContext.arg({
      type: graphqlTsSchema.Upload
    }),
    ref: apiWithoutContext.arg({
      type: apiWithoutContext.String
    })
  }
});
const fileFields = apiWithContext.fields()({
  filename: apiWithContext.field({
    type: apiWithoutContext.nonNull(apiWithoutContext.String)
  }),
  filesize: apiWithContext.field({
    type: apiWithoutContext.nonNull(apiWithoutContext.Int)
  }),
  ref: apiWithContext.field({
    type: apiWithoutContext.nonNull(apiWithoutContext.String),

    resolve(data) {
      return fields_types_file_utils_dist_keystone6CoreFieldsTypesFileUtils.getFileRef(data.mode, data.filename);
    }

  }),
  url: apiWithContext.field({
    type: apiWithoutContext.nonNull(apiWithoutContext.String),

    resolve(data, args, context) {
      if (!context.files) {
        throw new Error('File context is undefined, this most likely means that you havent configurd keystone with a file config, see https://keystonejs.com/docs/apis/config#files for details');
      }

      return context.files.getUrl(data.mode, data.filename);
    }

  })
});
const FileFieldOutput = apiWithContext["interface"]()({
  name: 'FileFieldOutput',
  fields: fileFields,
  resolveType: val => val.mode === 'local' ? 'LocalFileFieldOutput' : 'CloudFileFieldOutput'
});
const LocalFileFieldOutput = apiWithContext.object()({
  name: 'LocalFileFieldOutput',
  interfaces: [FileFieldOutput],
  fields: fileFields
});
const CloudFileFieldOutput = apiWithContext.object()({
  name: 'CloudFileFieldOutput',
  interfaces: [FileFieldOutput],
  fields: fileFields
});

async function inputResolver$1(data, context) {
  if (data === null || data === undefined) {
    return {
      mode: data,
      filename: data,
      filesize: data
    };
  }

  if (data.ref) {
    if (data.upload) {
      throw graphqlErrors.userInputError('Only one of ref and upload can be passed to FileFieldInput');
    }

    return context.files.getDataFromRef(data.ref);
  }

  if (!data.upload) {
    throw graphqlErrors.userInputError('Either ref or upload must be passed to FileFieldInput');
  }

  const upload = await data.upload;
  return context.files.getDataFromStream(upload.createReadStream(), upload.filename);
}

const file = function () {
  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return () => {
    if (config.isIndexed === 'unique') {
      throw Error("isIndexed: 'unique' is not a supported option for field type file");
    }

    return sqlite.fieldType({
      kind: 'multi',
      fields: {
        filesize: {
          kind: 'scalar',
          scalar: 'Int',
          mode: 'optional'
        },
        mode: {
          kind: 'scalar',
          scalar: 'String',
          mode: 'optional'
        },
        filename: {
          kind: 'scalar',
          scalar: 'String',
          mode: 'optional'
        }
      }
    })(_objectSpread(_objectSpread({}, config), {}, {
      input: {
        create: {
          arg: apiWithoutContext.arg({
            type: FileFieldInput
          }),
          resolve: inputResolver$1
        },
        update: {
          arg: apiWithoutContext.arg({
            type: FileFieldInput
          }),
          resolve: inputResolver$1
        }
      },
      output: apiWithContext.field({
        type: FileFieldOutput,

        resolve(_ref) {
          let {
            value: {
              filesize,
              filename,
              mode
            }
          } = _ref;

          if (filesize === null || filename === null || mode === null || mode !== 'local' && mode !== 'cloud') {
            return null;
          }

          return {
            mode,
            filename,
            filesize
          };
        }

      }),
      unreferencedConcreteInterfaceImplementations: [LocalFileFieldOutput, CloudFileFieldOutput],
      views: resolveView('file/views')
    }));
  };
};

const _excluded$8 = ["isIndexed", "validation", "defaultValue"];
const float = function () {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  let {
    isIndexed,
    validation,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$8);

  return meta => {
    var _config$label, _config$db, _config$graphql, _config$graphql$creat, _config$graphql2, _config$graphql2$crea, _config$graphql3, _config$graphql3$read;

    if (defaultValue !== undefined && (typeof defaultValue !== 'number' || !Number.isFinite(defaultValue))) {
      throw new Error(`The float field at ${meta.listKey}.${meta.fieldKey} specifies a default value of: ${defaultValue} but it must be a valid finite number`);
    }

    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined && (typeof validation.min !== 'number' || !Number.isFinite(validation.min))) {
      throw new Error(`The float field at ${meta.listKey}.${meta.fieldKey} specifies validation.min: ${validation.min} but it must be a valid finite number`);
    }

    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined && (typeof validation.max !== 'number' || !Number.isFinite(validation.max))) {
      throw new Error(`The float field at ${meta.listKey}.${meta.fieldKey} specifies validation.max: ${validation.max} but it must be a valid finite number`);
    }

    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined && (validation === null || validation === void 0 ? void 0 : validation.max) !== undefined && validation.min > validation.max) {
      throw new Error(`The float field at ${meta.listKey}.${meta.fieldKey} specifies a validation.max that is less than the validation.min, and therefore has no valid options`);
    }

    const isNullable = getResolvedIsNullable(validation, config.db);
    assertReadIsNonNullAllowed(meta, config, isNullable);
    assertCreateIsNonNullAllowed(meta, config);
    const mode = isNullable === false ? 'required' : 'optional';
    const fieldLabel = (_config$label = config.label) !== null && _config$label !== void 0 ? _config$label : graphqlErrors.humanize(meta.fieldKey);
    return sqlite.fieldType({
      kind: 'scalar',
      mode,
      scalar: 'Float',
      index: isIndexed === true ? 'index' : isIndexed || undefined,
      default: typeof defaultValue === 'number' ? {
        kind: 'literal',
        value: defaultValue
      } : undefined,
      map: (_config$db = config.db) === null || _config$db === void 0 ? void 0 : _config$db.map
    })(_objectSpread(_objectSpread({}, config), {}, {
      hooks: _objectSpread(_objectSpread({}, config.hooks), {}, {
        async validateInput(args) {
          var _config$hooks, _config$hooks$validat;

          const value = args.resolvedData[meta.fieldKey];

          if ((validation !== null && validation !== void 0 && validation.isRequired || isNullable === false) && value === null) {
            args.addValidationError(`${fieldLabel} is required`);
          }

          if (typeof value === 'number') {
            if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined && value > validation.max) {
              args.addValidationError(`${fieldLabel} must be less than or equal to ${validation.max}`);
            }

            if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined && value < validation.min) {
              args.addValidationError(`${fieldLabel} must be greater than or equal to ${validation.min}`);
            }
          }

          await ((_config$hooks = config.hooks) === null || _config$hooks === void 0 ? void 0 : (_config$hooks$validat = _config$hooks.validateInput) === null || _config$hooks$validat === void 0 ? void 0 : _config$hooks$validat.call(_config$hooks, args));
        }

      }),
      input: {
        uniqueWhere: isIndexed === 'unique' ? {
          arg: apiWithoutContext.arg({
            type: apiWithoutContext.Float
          })
        } : undefined,
        where: {
          arg: apiWithoutContext.arg({
            type: jsonFieldTypePolyfillForSqlite.filters[meta.provider].Float[mode]
          }),
          resolve: mode === 'optional' ? jsonFieldTypePolyfillForSqlite.resolveCommon : undefined
        },
        create: {
          arg: apiWithoutContext.arg({
            type: (_config$graphql = config.graphql) !== null && _config$graphql !== void 0 && (_config$graphql$creat = _config$graphql.create) !== null && _config$graphql$creat !== void 0 && _config$graphql$creat.isNonNull ? apiWithoutContext.nonNull(apiWithoutContext.Float) : apiWithoutContext.Float,
            defaultValue: (_config$graphql2 = config.graphql) !== null && _config$graphql2 !== void 0 && (_config$graphql2$crea = _config$graphql2.create) !== null && _config$graphql2$crea !== void 0 && _config$graphql2$crea.isNonNull && typeof defaultValue === 'number' ? defaultValue : undefined
          }),

          resolve(value) {
            if (value === undefined) {
              return defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
            }

            return value;
          }

        },
        update: {
          arg: apiWithoutContext.arg({
            type: apiWithoutContext.Float
          })
        },
        orderBy: {
          arg: apiWithoutContext.arg({
            type: sqlite.orderDirectionEnum
          })
        }
      },
      output: apiWithContext.field({
        type: (_config$graphql3 = config.graphql) !== null && _config$graphql3 !== void 0 && (_config$graphql3$read = _config$graphql3.read) !== null && _config$graphql3$read !== void 0 && _config$graphql3$read.isNonNull ? apiWithoutContext.nonNull(apiWithoutContext.Float) : apiWithoutContext.Float
      }),
      views: resolveView('float/views'),

      getAdminMeta() {
        var _validation$isRequire;

        return {
          validation: {
            min: (validation === null || validation === void 0 ? void 0 : validation.min) || null,
            max: (validation === null || validation === void 0 ? void 0 : validation.max) || null,
            isRequired: (_validation$isRequire = validation === null || validation === void 0 ? void 0 : validation.isRequired) !== null && _validation$isRequire !== void 0 ? _validation$isRequire : false
          },
          defaultValue: defaultValue !== null && defaultValue !== void 0 ? defaultValue : null
        };
      }

    }));
  };
};

const _excluded$7 = ["isIndexed", "defaultValue", "validation"];
// These are the max and min values available to a 32 bit signed integer
const MAX_INT$1 = 2147483647;
const MIN_INT$1 = -2147483648;
const integer = function () {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  let {
    isIndexed,
    defaultValue: _defaultValue,
    validation
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$7);

  return meta => {
    var _config$label, _config$db, _config$graphql, _config$graphql$creat, _config$graphql2, _config$graphql2$crea, _config$graphql3, _config$graphql3$read;

    const defaultValue = _defaultValue !== null && _defaultValue !== void 0 ? _defaultValue : null;
    const hasAutoIncDefault = typeof defaultValue == 'object' && defaultValue !== null && defaultValue.kind === 'autoincrement';
    const isNullable = getResolvedIsNullable(validation, config.db);

    if (hasAutoIncDefault) {
      if (meta.provider === 'sqlite') {
        throw new Error(`The integer field at ${meta.listKey}.${meta.fieldKey} specifies defaultValue: { kind: 'autoincrement' }, this is not supported on SQLite`);
      }

      if (isNullable !== false) {
        throw new Error(`The integer field at ${meta.listKey}.${meta.fieldKey} specifies defaultValue: { kind: 'autoincrement' } but doesn't specify db.isNullable: false.\n` + `Having nullable autoincrements on Prisma currently incorrectly creates a non-nullable column so it is not allowed.\n` + `https://github.com/prisma/prisma/issues/8663`);
      }
    }

    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined && !Number.isInteger(validation.min)) {
      throw new Error(`The integer field at ${meta.listKey}.${meta.fieldKey} specifies validation.min: ${validation.min} but it must be an integer`);
    }

    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined && !Number.isInteger(validation.max)) {
      throw new Error(`The integer field at ${meta.listKey}.${meta.fieldKey} specifies validation.max: ${validation.max} but it must be an integer`);
    }

    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined && ((validation === null || validation === void 0 ? void 0 : validation.min) > MAX_INT$1 || (validation === null || validation === void 0 ? void 0 : validation.min) < MIN_INT$1)) {
      throw new Error(`The integer field at ${meta.listKey}.${meta.fieldKey} specifies validation.min: ${validation.min} which is outside of the range of a 32bit signed integer(${MIN_INT$1} - ${MAX_INT$1}) which is not allowed`);
    }

    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined && ((validation === null || validation === void 0 ? void 0 : validation.max) > MAX_INT$1 || (validation === null || validation === void 0 ? void 0 : validation.max) < MIN_INT$1)) {
      throw new Error(`The integer field at ${meta.listKey}.${meta.fieldKey} specifies validation.max: ${validation.max} which is outside of the range of a 32bit signed integer(${MIN_INT$1} - ${MAX_INT$1}) which is not allowed`);
    }

    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined && (validation === null || validation === void 0 ? void 0 : validation.max) !== undefined && validation.min > validation.max) {
      throw new Error(`The integer field at ${meta.listKey}.${meta.fieldKey} specifies a validation.max that is less than the validation.min, and therefore has no valid options`);
    }

    assertReadIsNonNullAllowed(meta, config, isNullable);
    assertCreateIsNonNullAllowed(meta, config);
    const mode = isNullable === false ? 'required' : 'optional';
    const fieldLabel = (_config$label = config.label) !== null && _config$label !== void 0 ? _config$label : graphqlErrors.humanize(meta.fieldKey);
    return sqlite.fieldType({
      kind: 'scalar',
      mode,
      scalar: 'Int',
      // This will resolve to 'index' if the boolean is true, otherwise other values - false will be converted to undefined
      index: isIndexed === true ? 'index' : isIndexed || undefined,
      default: typeof defaultValue === 'number' ? {
        kind: 'literal',
        value: defaultValue
      } : (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.kind) === 'autoincrement' ? {
        kind: 'autoincrement'
      } : undefined,
      map: (_config$db = config.db) === null || _config$db === void 0 ? void 0 : _config$db.map
    })(_objectSpread(_objectSpread({}, config), {}, {
      hooks: _objectSpread(_objectSpread({}, config.hooks), {}, {
        async validateInput(args) {
          var _config$hooks, _config$hooks$validat;

          const value = args.resolvedData[meta.fieldKey];

          if ((validation !== null && validation !== void 0 && validation.isRequired || isNullable === false) && (value === null || args.operation === 'create' && value === undefined && !hasAutoIncDefault)) {
            args.addValidationError(`${fieldLabel} is required`);
          }

          if (typeof value === 'number') {
            if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined && value < validation.min) {
              args.addValidationError(`${fieldLabel} must be greater than or equal to ${validation.min}`);
            }

            if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined && value > validation.max) {
              args.addValidationError(`${fieldLabel} must be less than or equal to ${validation.max}`);
            }
          }

          await ((_config$hooks = config.hooks) === null || _config$hooks === void 0 ? void 0 : (_config$hooks$validat = _config$hooks.validateInput) === null || _config$hooks$validat === void 0 ? void 0 : _config$hooks$validat.call(_config$hooks, args));
        }

      }),
      input: {
        uniqueWhere: isIndexed === 'unique' ? {
          arg: apiWithoutContext.arg({
            type: apiWithoutContext.Int
          })
        } : undefined,
        where: {
          arg: apiWithoutContext.arg({
            type: jsonFieldTypePolyfillForSqlite.filters[meta.provider].Int[mode]
          }),
          resolve: mode === 'optional' ? jsonFieldTypePolyfillForSqlite.resolveCommon : undefined
        },
        create: {
          arg: apiWithoutContext.arg({
            type: (_config$graphql = config.graphql) !== null && _config$graphql !== void 0 && (_config$graphql$creat = _config$graphql.create) !== null && _config$graphql$creat !== void 0 && _config$graphql$creat.isNonNull ? apiWithoutContext.nonNull(apiWithoutContext.Int) : apiWithoutContext.Int,
            defaultValue: (_config$graphql2 = config.graphql) !== null && _config$graphql2 !== void 0 && (_config$graphql2$crea = _config$graphql2.create) !== null && _config$graphql2$crea !== void 0 && _config$graphql2$crea.isNonNull && typeof defaultValue === 'number' ? defaultValue : undefined
          }),

          resolve(value) {
            if (value === undefined && typeof defaultValue === 'number') {
              return defaultValue;
            }

            return value;
          }

        },
        update: {
          arg: apiWithoutContext.arg({
            type: apiWithoutContext.Int
          })
        },
        orderBy: {
          arg: apiWithoutContext.arg({
            type: sqlite.orderDirectionEnum
          })
        }
      },
      output: apiWithContext.field({
        type: (_config$graphql3 = config.graphql) !== null && _config$graphql3 !== void 0 && (_config$graphql3$read = _config$graphql3.read) !== null && _config$graphql3$read !== void 0 && _config$graphql3$read.isNonNull ? apiWithoutContext.nonNull(apiWithoutContext.Int) : apiWithoutContext.Int
      }),
      views: resolveView('integer/views'),

      getAdminMeta() {
        var _validation$min, _validation$max, _validation$isRequire;

        return {
          validation: {
            min: (_validation$min = validation === null || validation === void 0 ? void 0 : validation.min) !== null && _validation$min !== void 0 ? _validation$min : MIN_INT$1,
            max: (_validation$max = validation === null || validation === void 0 ? void 0 : validation.max) !== null && _validation$max !== void 0 ? _validation$max : MAX_INT$1,
            isRequired: (_validation$isRequire = validation === null || validation === void 0 ? void 0 : validation.isRequired) !== null && _validation$isRequire !== void 0 ? _validation$isRequire : false
          },
          defaultValue: defaultValue === null || typeof defaultValue === 'number' ? defaultValue : 'autoincrement'
        };
      }

    }));
  };
};

const ImageExtensionEnum = apiWithoutContext["enum"]({
  name: 'ImageExtension',
  values: apiWithoutContext.enumValues(fields_types_image_utils_dist_keystone6CoreFieldsTypesImageUtils.SUPPORTED_IMAGE_EXTENSIONS)
});
const ImageFieldInput = apiWithoutContext.inputObject({
  name: 'ImageFieldInput',
  fields: {
    upload: apiWithoutContext.arg({
      type: graphqlTsSchema.Upload
    }),
    ref: apiWithoutContext.arg({
      type: apiWithoutContext.String
    })
  }
});
const imageOutputFields = apiWithContext.fields()({
  id: apiWithContext.field({
    type: apiWithoutContext.nonNull(apiWithoutContext.ID)
  }),
  filesize: apiWithContext.field({
    type: apiWithoutContext.nonNull(apiWithoutContext.Int)
  }),
  width: apiWithContext.field({
    type: apiWithoutContext.nonNull(apiWithoutContext.Int)
  }),
  height: apiWithContext.field({
    type: apiWithoutContext.nonNull(apiWithoutContext.Int)
  }),
  extension: apiWithContext.field({
    type: apiWithoutContext.nonNull(ImageExtensionEnum)
  }),
  ref: apiWithContext.field({
    type: apiWithoutContext.nonNull(apiWithoutContext.String),

    resolve(data) {
      return fields_types_image_utils_dist_keystone6CoreFieldsTypesImageUtils.getImageRef(data.mode, data.id, data.extension);
    }

  }),
  url: apiWithContext.field({
    type: apiWithoutContext.nonNull(apiWithoutContext.String),

    resolve(data, args, context) {
      if (!context.images) {
        throw new Error('Image context is undefined');
      }

      return context.images.getUrl(data.mode, data.id, data.extension);
    }

  })
});
const ImageFieldOutput = apiWithContext["interface"]()({
  name: 'ImageFieldOutput',
  fields: imageOutputFields,
  resolveType: val => val.mode === 'local' ? 'LocalImageFieldOutput' : 'CloudImageFieldOutput'
});
const LocalImageFieldOutput = apiWithContext.object()({
  name: 'LocalImageFieldOutput',
  interfaces: [ImageFieldOutput],
  fields: imageOutputFields
});
const CloudImageFieldOutput = apiWithContext.object()({
  name: 'CloudImageFieldOutput',
  interfaces: [ImageFieldOutput],
  fields: imageOutputFields
});

async function inputResolver(data, context) {
  if (data === null || data === undefined) {
    return {
      extension: data,
      filesize: data,
      height: data,
      id: data,
      mode: data,
      width: data
    };
  }

  if (data.ref) {
    if (data.upload) {
      throw graphqlErrors.userInputError('Only one of ref and upload can be passed to ImageFieldInput');
    }

    return context.images.getDataFromRef(data.ref);
  }

  if (!data.upload) {
    throw graphqlErrors.userInputError('Either ref or upload must be passed to ImageFieldInput');
  }

  return context.images.getDataFromStream((await data.upload).createReadStream());
}

const extensionsSet = new Set(fields_types_image_utils_dist_keystone6CoreFieldsTypesImageUtils.SUPPORTED_IMAGE_EXTENSIONS);

function isValidImageExtension(extension) {
  return extensionsSet.has(extension);
}

const image = function () {
  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return () => {
    if (config.isIndexed === 'unique') {
      throw Error("isIndexed: 'unique' is not a supported option for field type image");
    }

    return sqlite.fieldType({
      kind: 'multi',
      fields: {
        filesize: {
          kind: 'scalar',
          scalar: 'Int',
          mode: 'optional'
        },
        extension: {
          kind: 'scalar',
          scalar: 'String',
          mode: 'optional'
        },
        width: {
          kind: 'scalar',
          scalar: 'Int',
          mode: 'optional'
        },
        height: {
          kind: 'scalar',
          scalar: 'Int',
          mode: 'optional'
        },
        mode: {
          kind: 'scalar',
          scalar: 'String',
          mode: 'optional'
        },
        id: {
          kind: 'scalar',
          scalar: 'String',
          mode: 'optional'
        }
      }
    })(_objectSpread(_objectSpread({}, config), {}, {
      input: {
        create: {
          arg: apiWithoutContext.arg({
            type: ImageFieldInput
          }),
          resolve: inputResolver
        },
        update: {
          arg: apiWithoutContext.arg({
            type: ImageFieldInput
          }),
          resolve: inputResolver
        }
      },
      output: apiWithContext.field({
        type: ImageFieldOutput,

        resolve(_ref) {
          let {
            value: {
              extension,
              filesize,
              height,
              id,
              mode,
              width
            }
          } = _ref;

          if (extension === null || !isValidImageExtension(extension) || filesize === null || height === null || width === null || id === null || mode === null || mode !== 'local' && mode !== 'cloud') {
            return null;
          }

          return {
            mode,
            extension,
            filesize,
            height,
            width,
            id
          };
        }

      }),
      unreferencedConcreteInterfaceImplementations: [LocalImageFieldOutput, CloudImageFieldOutput],
      views: resolveView('image/views')
    }));
  };
};

const _excluded$6 = ["defaultValue"];
const json = function () {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  let {
    defaultValue = null
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$6);

  return meta => {
    var _config$db;

    if (config.isIndexed === 'unique') {
      throw Error("isIndexed: 'unique' is not a supported option for field type json");
    }

    const resolve = val => val === null && meta.provider === 'postgresql' ? 'DbNull' : val;

    return jsonFieldTypePolyfillForSqlite.jsonFieldTypePolyfilledForSQLite(meta.provider, _objectSpread(_objectSpread({}, config), {}, {
      input: {
        create: {
          arg: apiWithoutContext.arg({
            type: graphqlTsSchema.JSON
          }),

          resolve(val) {
            return resolve(val === undefined ? defaultValue : val);
          }

        },
        update: {
          arg: apiWithoutContext.arg({
            type: graphqlTsSchema.JSON
          }),
          resolve
        }
      },
      output: apiWithContext.field({
        type: graphqlTsSchema.JSON
      }),
      views: resolveView('json/views'),
      getAdminMeta: () => ({
        defaultValue
      })
    }), {
      default: defaultValue === null ? undefined : {
        kind: 'literal',
        value: JSON.stringify(defaultValue)
      },
      map: (_config$db = config.db) === null || _config$db === void 0 ? void 0 : _config$db.map
    });
  };
};

const _excluded$5 = ["bcrypt", "workFactor", "validation"];
const PasswordState = apiWithContext.object()({
  name: 'PasswordState',
  fields: {
    isSet: apiWithContext.field({
      type: apiWithoutContext.nonNull(apiWithoutContext.Boolean)
    })
  }
});
const PasswordFilter = apiWithoutContext.inputObject({
  name: 'PasswordFilter',
  fields: {
    isSet: apiWithoutContext.arg({
      type: apiWithoutContext.nonNull(apiWithoutContext.Boolean)
    })
  }
});
const bcryptHashRegex = /^\$2[aby]?\$\d{1,2}\$[.\/A-Za-z0-9]{53}$/;
const password = function () {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  let {
    bcrypt = bcryptjs__default["default"],
    workFactor = 10,
    validation: _validation
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$5);

  return meta => {
    var _config$label, _validation$isRequire, _validation$rejectCom, _validation$match$exp, _validation$length$mi, _validation$length, _validation$length$ma, _validation$length2, _config$db;

    if (config.isIndexed === 'unique') {
      throw Error("isIndexed: 'unique' is not a supported option for field type password");
    }

    const fieldLabel = (_config$label = config.label) !== null && _config$label !== void 0 ? _config$label : graphqlErrors.humanize(meta.fieldKey);
    const validation = {
      isRequired: (_validation$isRequire = _validation === null || _validation === void 0 ? void 0 : _validation.isRequired) !== null && _validation$isRequire !== void 0 ? _validation$isRequire : false,
      rejectCommon: (_validation$rejectCom = _validation === null || _validation === void 0 ? void 0 : _validation.rejectCommon) !== null && _validation$rejectCom !== void 0 ? _validation$rejectCom : false,
      match: _validation !== null && _validation !== void 0 && _validation.match ? {
        regex: _validation.match.regex,
        explanation: (_validation$match$exp = _validation.match.explanation) !== null && _validation$match$exp !== void 0 ? _validation$match$exp : `${fieldLabel} must match ${_validation.match.regex}`
      } : null,
      length: {
        min: (_validation$length$mi = _validation === null || _validation === void 0 ? void 0 : (_validation$length = _validation.length) === null || _validation$length === void 0 ? void 0 : _validation$length.min) !== null && _validation$length$mi !== void 0 ? _validation$length$mi : 8,
        max: (_validation$length$ma = _validation === null || _validation === void 0 ? void 0 : (_validation$length2 = _validation.length) === null || _validation$length2 === void 0 ? void 0 : _validation$length2.max) !== null && _validation$length$ma !== void 0 ? _validation$length$ma : null
      }
    };
    const isNullable = getResolvedIsNullable(validation, config.db);

    for (const type of ['min', 'max']) {
      const val = validation.length[type];

      if (val !== null && (!Number.isInteger(val) || val < 1)) {
        throw new Error(`The password field at ${meta.listKey}.${meta.fieldKey} specifies validation.length.${type}: ${val} but it must be a positive integer >= 1`);
      }
    }

    if (validation.length.max !== null && validation.length.min > validation.length.max) {
      throw new Error(`The password field at ${meta.listKey}.${meta.fieldKey} specifies a validation.length.max that is less than the validation.length.min, and therefore has no valid options`);
    }

    if (workFactor < 6 || workFactor > 31 || !Number.isInteger(workFactor)) {
      throw new Error(`The password field at ${meta.listKey}.${meta.fieldKey} specifies workFactor: ${workFactor} but it must be an integer between 6 and 31`);
    }

    function inputResolver(val) {
      if (val == null) {
        return val;
      }

      return bcrypt.hash(val, workFactor);
    }

    return sqlite.fieldType({
      kind: 'scalar',
      scalar: 'String',
      mode: isNullable === false ? 'required' : 'optional',
      map: (_config$db = config.db) === null || _config$db === void 0 ? void 0 : _config$db.map
    })(_objectSpread(_objectSpread({}, config), {}, {
      hooks: _objectSpread(_objectSpread({}, config.hooks), {}, {
        async validateInput(args) {
          var _config$hooks, _config$hooks$validat;

          const val = args.inputData[meta.fieldKey];

          if (args.resolvedData[meta.fieldKey] === null && (validation !== null && validation !== void 0 && validation.isRequired || isNullable === false)) {
            args.addValidationError(`${fieldLabel} is required`);
          }

          if (val != null) {
            if (val.length < validation.length.min) {
              if (validation.length.min === 1) {
                args.addValidationError(`${fieldLabel} must not be empty`);
              } else {
                args.addValidationError(`${fieldLabel} must be at least ${validation.length.min} characters long`);
              }
            }

            if (validation.length.max !== null && val.length > validation.length.max) {
              args.addValidationError(`${fieldLabel} must be no longer than ${validation.length.max} characters`);
            }

            if (validation.match && !validation.match.regex.test(val)) {
              args.addValidationError(validation.match.explanation);
            }

            if (validation.rejectCommon && dumbPasswords__default["default"].check(val)) {
              args.addValidationError(`${fieldLabel} is too common and is not allowed`);
            }
          }

          await ((_config$hooks = config.hooks) === null || _config$hooks === void 0 ? void 0 : (_config$hooks$validat = _config$hooks.validateInput) === null || _config$hooks$validat === void 0 ? void 0 : _config$hooks$validat.call(_config$hooks, args));
        }

      }),
      input: {
        where: isNullable === false ? undefined : {
          arg: apiWithoutContext.arg({
            type: PasswordFilter
          }),

          resolve(val) {
            if (val === null) {
              throw graphqlErrors.userInputError('Password filters cannot be set to null');
            }

            if (val.isSet) {
              return {
                not: null
              };
            }

            return null;
          }

        },
        create: {
          arg: apiWithoutContext.arg({
            type: apiWithoutContext.String
          }),

          resolve(val) {
            if (val === undefined) {
              return null;
            }

            return inputResolver(val);
          }

        },
        update: {
          arg: apiWithoutContext.arg({
            type: apiWithoutContext.String
          }),
          resolve: inputResolver
        }
      },
      views: resolveView('password/views'),
      getAdminMeta: () => ({
        isNullable,
        validation: _objectSpread(_objectSpread({}, validation), {}, {
          match: validation.match ? {
            regex: {
              source: validation.match.regex.source,
              flags: validation.match.regex.flags
            },
            explanation: validation.match.explanation
          } : null
        })
      }),
      output: apiWithContext.field({
        type: PasswordState,

        resolve(val) {
          return {
            isSet: val.value !== null && bcryptHashRegex.test(val.value)
          };
        },

        extensions: {
          keystoneSecretField: {
            generateHash: async secret => {
              return bcrypt.hash(secret, workFactor);
            },
            compare: (secret, hash) => {
              return bcrypt.compare(secret, hash);
            }
          }
        }
      })
    }));
  };
};

const _excluded$4 = ["ref"];

const relationship = _ref => {
  let {
    ref
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$4);

  return meta => {
    var _config$db2;

    const {
      many = false
    } = config;
    const [foreignListKey, foreignFieldKey] = ref.split('.');

    const commonConfig = _objectSpread(_objectSpread({}, config), {}, {
      views: resolveView('relationship/views'),
      getAdminMeta: adminMetaRoot => {
        var _config$ui, _config$ui$hideCreate, _config$ui2, _config$ui3, _config$ui$linkToItem, _config$ui$removeMode, _config$ui$inlineCrea3, _config$ui$inlineEdit3, _config$ui$inlineConn, _config$ui4;

        if (!meta.lists[foreignListKey]) {
          throw new Error(`The ref [${ref}] on relationship [${meta.listKey}.${meta.fieldKey}] is invalid`);
        }

        if (((_config$ui = config.ui) === null || _config$ui === void 0 ? void 0 : _config$ui.displayMode) === 'cards') {
          // we're checking whether the field which will be in the admin meta at the time that getAdminMeta is called.
          // in newer versions of keystone, it will be there and it will not be there for older versions of keystone.
          // this is so that relationship fields doesn't break in confusing ways
          // if people are using a slightly older version of keystone
          const currentField = adminMetaRoot.listsByKey[meta.listKey].fields.find(x => x.path === meta.fieldKey);

          if (currentField) {
            const allForeignFields = new Set(adminMetaRoot.listsByKey[foreignListKey].fields.map(x => x.path));

            for (const [configOption, foreignFields] of [['ui.cardFields', config.ui.cardFields], ['ui.inlineCreate.fields', (_config$ui$inlineCrea = (_config$ui$inlineCrea2 = config.ui.inlineCreate) === null || _config$ui$inlineCrea2 === void 0 ? void 0 : _config$ui$inlineCrea2.fields) !== null && _config$ui$inlineCrea !== void 0 ? _config$ui$inlineCrea : []], ['ui.inlineEdit.fields', (_config$ui$inlineEdit = (_config$ui$inlineEdit2 = config.ui.inlineEdit) === null || _config$ui$inlineEdit2 === void 0 ? void 0 : _config$ui$inlineEdit2.fields) !== null && _config$ui$inlineEdit !== void 0 ? _config$ui$inlineEdit : []]]) {
              var _config$ui$inlineCrea, _config$ui$inlineCrea2, _config$ui$inlineEdit, _config$ui$inlineEdit2;

              for (const foreignField of foreignFields) {
                if (!allForeignFields.has(foreignField)) {
                  throw new Error(`The ${configOption} option on the relationship field at ${meta.listKey}.${meta.fieldKey} includes the "${foreignField}" field but that field does not exist on the "${foreignListKey}" list`);
                }
              }
            }
          }
        }

        return _objectSpread({
          refFieldKey: foreignFieldKey,
          refListKey: foreignListKey,
          many,
          hideCreate: (_config$ui$hideCreate = (_config$ui2 = config.ui) === null || _config$ui2 === void 0 ? void 0 : _config$ui2.hideCreate) !== null && _config$ui$hideCreate !== void 0 ? _config$ui$hideCreate : false
        }, ((_config$ui3 = config.ui) === null || _config$ui3 === void 0 ? void 0 : _config$ui3.displayMode) === 'cards' ? {
          displayMode: 'cards',
          cardFields: config.ui.cardFields,
          linkToItem: (_config$ui$linkToItem = config.ui.linkToItem) !== null && _config$ui$linkToItem !== void 0 ? _config$ui$linkToItem : false,
          removeMode: (_config$ui$removeMode = config.ui.removeMode) !== null && _config$ui$removeMode !== void 0 ? _config$ui$removeMode : 'disconnect',
          inlineCreate: (_config$ui$inlineCrea3 = config.ui.inlineCreate) !== null && _config$ui$inlineCrea3 !== void 0 ? _config$ui$inlineCrea3 : null,
          inlineEdit: (_config$ui$inlineEdit3 = config.ui.inlineEdit) !== null && _config$ui$inlineEdit3 !== void 0 ? _config$ui$inlineEdit3 : null,
          inlineConnect: (_config$ui$inlineConn = config.ui.inlineConnect) !== null && _config$ui$inlineConn !== void 0 ? _config$ui$inlineConn : false,
          refLabelField: adminMetaRoot.listsByKey[foreignListKey].labelField
        } : ((_config$ui4 = config.ui) === null || _config$ui4 === void 0 ? void 0 : _config$ui4.displayMode) === 'count' ? {
          displayMode: 'count'
        } : {
          displayMode: 'select',
          refLabelField: adminMetaRoot.listsByKey[foreignListKey].labelField
        });
      }
    });

    if (!meta.lists[foreignListKey]) {
      throw new Error(`Unable to resolve related list '${foreignListKey}' from ${meta.listKey}.${meta.fieldKey}`);
    }

    const listTypes = meta.lists[foreignListKey].types;

    if (config.many) {
      var _config$db;

      return sqlite.fieldType({
        kind: 'relation',
        mode: 'many',
        list: foreignListKey,
        field: foreignFieldKey,
        relationName: (_config$db = config.db) === null || _config$db === void 0 ? void 0 : _config$db.relationName
      })(_objectSpread(_objectSpread({}, commonConfig), {}, {
        input: {
          where: {
            arg: apiWithoutContext.arg({
              type: listTypes.relateTo.many.where
            }),

            resolve(value, context, resolve) {
              return resolve(value);
            }

          },
          create: listTypes.relateTo.many.create && {
            arg: apiWithoutContext.arg({
              type: listTypes.relateTo.many.create
            }),

            async resolve(value, context, resolve) {
              return resolve(value);
            }

          },
          update: listTypes.relateTo.many.update && {
            arg: apiWithoutContext.arg({
              type: listTypes.relateTo.many.update
            }),

            async resolve(value, context, resolve) {
              return resolve(value);
            }

          }
        },
        output: apiWithContext.field({
          args: listTypes.findManyArgs,
          type: apiWithoutContext.list(apiWithoutContext.nonNull(listTypes.output)),

          resolve(_ref2, args) {
            let {
              value
            } = _ref2;
            return value.findMany(args);
          }

        }),
        extraOutputFields: {
          [`${meta.fieldKey}Count`]: apiWithContext.field({
            type: apiWithoutContext.Int,
            args: {
              where: apiWithoutContext.arg({
                type: apiWithoutContext.nonNull(listTypes.where),
                defaultValue: {}
              })
            },

            resolve(_ref3, args) {
              let {
                value
              } = _ref3;
              return value.count({
                where: args.where
              });
            }

          })
        }
      }));
    }

    return sqlite.fieldType({
      kind: 'relation',
      mode: 'one',
      list: foreignListKey,
      field: foreignFieldKey,
      foreignKey: (_config$db2 = config.db) === null || _config$db2 === void 0 ? void 0 : _config$db2.foreignKey
    })(_objectSpread(_objectSpread({}, commonConfig), {}, {
      input: {
        where: {
          arg: apiWithoutContext.arg({
            type: listTypes.where
          }),

          resolve(value, context, resolve) {
            return resolve(value);
          }

        },
        create: listTypes.relateTo.one.create && {
          arg: apiWithoutContext.arg({
            type: listTypes.relateTo.one.create
          }),

          async resolve(value, context, resolve) {
            return resolve(value);
          }

        },
        update: listTypes.relateTo.one.update && {
          arg: apiWithoutContext.arg({
            type: listTypes.relateTo.one.update
          }),

          async resolve(value, context, resolve) {
            return resolve(value);
          }

        }
      },
      output: apiWithContext.field({
        type: listTypes.output,

        resolve(_ref4) {
          let {
            value
          } = _ref4;
          return value();
        }

      })
    }));
  };
};

const _excluded$3 = ["displayMode"],
      _excluded2 = ["isIndexed", "ui", "defaultValue", "validation"];
// These are the max and min values available to a 32 bit signed integer
const MAX_INT = 2147483647;
const MIN_INT = -2147483648;
const select = _ref => {
  let {
    isIndexed,
    ui: {
      displayMode = 'select'
    } = {},
    defaultValue,
    validation
  } = _ref,
      ui = _objectWithoutProperties(_ref.ui, _excluded$3),
      config = _objectWithoutProperties(_ref, _excluded2);

  return meta => {
    var _config$label, _config$db;

    const fieldLabel = (_config$label = config.label) !== null && _config$label !== void 0 ? _config$label : graphqlErrors.humanize(meta.fieldKey);
    const resolvedIsNullable = getResolvedIsNullable(validation, config.db);
    assertReadIsNonNullAllowed(meta, config, resolvedIsNullable);
    assertCreateIsNonNullAllowed(meta, config);

    const commonConfig = options => {
      const values = new Set(options.map(x => x.value));

      if (values.size !== options.length) {
        throw new Error(`The select field at ${meta.listKey}.${meta.fieldKey} has duplicate options, this is not allowed`);
      }

      return _objectSpread(_objectSpread({}, config), {}, {
        ui,
        hooks: _objectSpread(_objectSpread({}, config.hooks), {}, {
          async validateInput(args) {
            var _config$hooks, _config$hooks$validat;

            const value = args.resolvedData[meta.fieldKey];

            if (value != null && !values.has(value)) {
              args.addValidationError(`${value} is not a possible value for ${fieldLabel}`);
            }

            if ((validation !== null && validation !== void 0 && validation.isRequired || resolvedIsNullable === false) && (value === null || value === undefined && args.operation === 'create')) {
              args.addValidationError(`${fieldLabel} is required`);
            }

            await ((_config$hooks = config.hooks) === null || _config$hooks === void 0 ? void 0 : (_config$hooks$validat = _config$hooks.validateInput) === null || _config$hooks$validat === void 0 ? void 0 : _config$hooks$validat.call(_config$hooks, args));
          }

        }),
        views: resolveView('select/views'),
        getAdminMeta: () => {
          var _config$type, _validation$isRequire;

          return {
            options,
            type: (_config$type = config.type) !== null && _config$type !== void 0 ? _config$type : 'string',
            displayMode: displayMode,
            defaultValue: defaultValue !== null && defaultValue !== void 0 ? defaultValue : null,
            isRequired: (_validation$isRequire = validation === null || validation === void 0 ? void 0 : validation.isRequired) !== null && _validation$isRequire !== void 0 ? _validation$isRequire : false
          };
        }
      });
    };

    const mode = resolvedIsNullable === false ? 'required' : 'optional';
    const commonDbFieldConfig = {
      mode,
      index: isIndexed === true ? 'index' : isIndexed || undefined,
      default: defaultValue === undefined ? undefined : {
        kind: 'literal',
        value: defaultValue
      },
      map: (_config$db = config.db) === null || _config$db === void 0 ? void 0 : _config$db.map
    };

    const resolveCreate = val => {
      if (val === undefined) {
        var _ref2;

        return (_ref2 = defaultValue) !== null && _ref2 !== void 0 ? _ref2 : null;
      }

      return val;
    };

    const output = type => {
      var _config$graphql, _config$graphql$read;

      return (_config$graphql = config.graphql) !== null && _config$graphql !== void 0 && (_config$graphql$read = _config$graphql.read) !== null && _config$graphql$read !== void 0 && _config$graphql$read.isNonNull ? apiWithoutContext.nonNull(type) : type;
    };

    const create = type => {
      var _config$graphql2, _config$graphql2$read;

      const isNonNull = ((_config$graphql2 = config.graphql) === null || _config$graphql2 === void 0 ? void 0 : (_config$graphql2$read = _config$graphql2.read) === null || _config$graphql2$read === void 0 ? void 0 : _config$graphql2$read.isNonNull) === true;
      return apiWithoutContext.arg({
        type: isNonNull ? apiWithoutContext.nonNull(type) : type,
        defaultValue: isNonNull ? defaultValue : undefined
      });
    };

    if (config.type === 'integer') {
      if (config.options.some(_ref3 => {
        let {
          value
        } = _ref3;
        return !Number.isInteger(value) || value > MAX_INT || value < MIN_INT;
      })) {
        throw new Error(`The select field at ${meta.listKey}.${meta.fieldKey} specifies integer values that are outside the range of a 32 bit signed integer`);
      }

      return sqlite.fieldType(_objectSpread({
        kind: 'scalar',
        scalar: 'Int'
      }, commonDbFieldConfig))(_objectSpread(_objectSpread({}, commonConfig(config.options)), {}, {
        input: {
          uniqueWhere: isIndexed === 'unique' ? {
            arg: apiWithoutContext.arg({
              type: apiWithoutContext.Int
            })
          } : undefined,
          where: {
            arg: apiWithoutContext.arg({
              type: jsonFieldTypePolyfillForSqlite.filters[meta.provider].Int[mode]
            }),
            resolve: mode === 'required' ? undefined : jsonFieldTypePolyfillForSqlite.resolveCommon
          },
          create: {
            arg: create(apiWithoutContext.Int),
            resolve: resolveCreate
          },
          update: {
            arg: apiWithoutContext.arg({
              type: apiWithoutContext.Int
            })
          },
          orderBy: {
            arg: apiWithoutContext.arg({
              type: sqlite.orderDirectionEnum
            })
          }
        },
        output: apiWithContext.field({
          type: output(apiWithoutContext.Int)
        })
      }));
    }

    const options = config.options.map(option => {
      if (typeof option === 'string') {
        return {
          label: graphqlErrors.humanize(option),
          value: option
        };
      }

      return option;
    });

    if (config.type === 'enum') {
      const enumName = `${meta.listKey}${inflection__default["default"].classify(meta.fieldKey)}Type`;
      const graphQLType = apiWithoutContext["enum"]({
        name: enumName,
        values: apiWithoutContext.enumValues(options.map(x => x.value))
      });
      return sqlite.fieldType(meta.provider === 'sqlite' ? _objectSpread({
        kind: 'scalar',
        scalar: 'String'
      }, commonDbFieldConfig) : _objectSpread({
        kind: 'enum',
        values: options.map(x => x.value),
        name: enumName
      }, commonDbFieldConfig))(_objectSpread(_objectSpread({}, commonConfig(options)), {}, {
        input: {
          uniqueWhere: isIndexed === 'unique' ? {
            arg: apiWithoutContext.arg({
              type: graphQLType
            })
          } : undefined,
          where: {
            arg: apiWithoutContext.arg({
              type: jsonFieldTypePolyfillForSqlite.filters[meta.provider].enum(graphQLType).optional
            }),
            resolve: mode === 'required' ? undefined : jsonFieldTypePolyfillForSqlite.resolveCommon
          },
          create: {
            arg: create(graphQLType),
            resolve: resolveCreate
          },
          update: {
            arg: apiWithoutContext.arg({
              type: graphQLType
            })
          },
          orderBy: {
            arg: apiWithoutContext.arg({
              type: sqlite.orderDirectionEnum
            })
          }
        },
        output: apiWithContext.field({
          type: output(graphQLType)
        })
      }));
    }

    return sqlite.fieldType(_objectSpread({
      kind: 'scalar',
      scalar: 'String'
    }, commonDbFieldConfig))(_objectSpread(_objectSpread({}, commonConfig(options)), {}, {
      input: {
        uniqueWhere: isIndexed === 'unique' ? {
          arg: apiWithoutContext.arg({
            type: apiWithoutContext.String
          })
        } : undefined,
        where: {
          arg: apiWithoutContext.arg({
            type: jsonFieldTypePolyfillForSqlite.filters[meta.provider].String[mode]
          }),
          resolve: mode === 'required' ? undefined : jsonFieldTypePolyfillForSqlite.resolveString
        },
        create: {
          arg: create(apiWithoutContext.String),
          resolve: resolveCreate
        },
        update: {
          arg: apiWithoutContext.arg({
            type: apiWithoutContext.String
          })
        },
        orderBy: {
          arg: apiWithoutContext.arg({
            type: sqlite.orderDirectionEnum
          })
        }
      },
      output: apiWithContext.field({
        type: output(apiWithoutContext.String)
      })
    }));
  };
};

const _excluded$2 = ["isIndexed", "defaultValue", "validation"];
const text = function () {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  let {
    isIndexed,
    defaultValue: _defaultValue,
    validation: _validation
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$2);

  return meta => {
    var _validation$length2, _validation$length3, _validation$length4, _validation$length5, _validation$length$mi, _validation$length6, _validation$length7, _validation$length8, _config$db$isNullable, _config$db, _config$label, _config$db2, _config$graphql, _config$graphql$creat, _config$graphql2, _config$graphql2$crea, _config$graphql3, _config$graphql3$read;

    for (const type of ['min', 'max']) {
      var _validation$length;

      const val = _validation === null || _validation === void 0 ? void 0 : (_validation$length = _validation.length) === null || _validation$length === void 0 ? void 0 : _validation$length[type];

      if (val !== undefined && (!Number.isInteger(val) || val < 0)) {
        throw new Error(`The text field at ${meta.listKey}.${meta.fieldKey} specifies validation.length.${type}: ${val} but it must be a positive integer`);
      }

      if (_validation !== null && _validation !== void 0 && _validation.isRequired && val !== undefined && val === 0) {
        throw new Error(`The text field at ${meta.listKey}.${meta.fieldKey} specifies validation.isRequired: true and validation.length.${type}: 0, this is not allowed because validation.isRequired implies at least a min length of 1`);
      }
    }

    if ((_validation === null || _validation === void 0 ? void 0 : (_validation$length2 = _validation.length) === null || _validation$length2 === void 0 ? void 0 : _validation$length2.min) !== undefined && (_validation === null || _validation === void 0 ? void 0 : (_validation$length3 = _validation.length) === null || _validation$length3 === void 0 ? void 0 : _validation$length3.max) !== undefined && (_validation === null || _validation === void 0 ? void 0 : (_validation$length4 = _validation.length) === null || _validation$length4 === void 0 ? void 0 : _validation$length4.min) > (_validation === null || _validation === void 0 ? void 0 : (_validation$length5 = _validation.length) === null || _validation$length5 === void 0 ? void 0 : _validation$length5.max)) {
      throw new Error(`The text field at ${meta.listKey}.${meta.fieldKey} specifies a validation.length.max that is less than the validation.length.min, and therefore has no valid options`);
    }

    const validation = _objectSpread(_objectSpread({}, _validation), {}, {
      length: {
        min: _validation !== null && _validation !== void 0 && _validation.isRequired ? (_validation$length$mi = _validation === null || _validation === void 0 ? void 0 : (_validation$length6 = _validation.length) === null || _validation$length6 === void 0 ? void 0 : _validation$length6.min) !== null && _validation$length$mi !== void 0 ? _validation$length$mi : 1 : _validation === null || _validation === void 0 ? void 0 : (_validation$length7 = _validation.length) === null || _validation$length7 === void 0 ? void 0 : _validation$length7.min,
        max: _validation === null || _validation === void 0 ? void 0 : (_validation$length8 = _validation.length) === null || _validation$length8 === void 0 ? void 0 : _validation$length8.max
      }
    }); // defaulted to false as a zero length string is preferred to null


    const isNullable = (_config$db$isNullable = (_config$db = config.db) === null || _config$db === void 0 ? void 0 : _config$db.isNullable) !== null && _config$db$isNullable !== void 0 ? _config$db$isNullable : false;
    const fieldLabel = (_config$label = config.label) !== null && _config$label !== void 0 ? _config$label : graphqlErrors.humanize(meta.fieldKey);
    assertReadIsNonNullAllowed(meta, config, isNullable);
    assertCreateIsNonNullAllowed(meta, config);
    const mode = isNullable ? 'optional' : 'required';
    const defaultValue = isNullable === false || _defaultValue !== undefined ? _defaultValue || '' : undefined;
    return sqlite.fieldType({
      kind: 'scalar',
      mode,
      scalar: 'String',
      default: defaultValue === undefined ? undefined : {
        kind: 'literal',
        value: defaultValue
      },
      index: isIndexed === true ? 'index' : isIndexed || undefined,
      map: (_config$db2 = config.db) === null || _config$db2 === void 0 ? void 0 : _config$db2.map
    })(_objectSpread(_objectSpread({}, config), {}, {
      hooks: _objectSpread(_objectSpread({}, config.hooks), {}, {
        async validateInput(args) {
          var _config$hooks, _config$hooks$validat;

          const val = args.resolvedData[meta.fieldKey];

          if (val === null && (validation !== null && validation !== void 0 && validation.isRequired || isNullable === false)) {
            args.addValidationError(`${fieldLabel} is required`);
          }

          if (val != null) {
            var _validation$length9, _validation$length10;

            if ((validation === null || validation === void 0 ? void 0 : (_validation$length9 = validation.length) === null || _validation$length9 === void 0 ? void 0 : _validation$length9.min) !== undefined && val.length < validation.length.min) {
              if (validation.length.min === 1) {
                args.addValidationError(`${fieldLabel} must not be empty`);
              } else {
                args.addValidationError(`${fieldLabel} must be at least ${validation.length.min} characters long`);
              }
            }

            if ((validation === null || validation === void 0 ? void 0 : (_validation$length10 = validation.length) === null || _validation$length10 === void 0 ? void 0 : _validation$length10.max) !== undefined && val.length > validation.length.max) {
              args.addValidationError(`${fieldLabel} must be no longer than ${validation.length.max} characters`);
            }

            if (validation !== null && validation !== void 0 && validation.match && !validation.match.regex.test(val)) {
              args.addValidationError(validation.match.explanation || `${fieldLabel} must match ${validation.match.regex}`);
            }
          }

          await ((_config$hooks = config.hooks) === null || _config$hooks === void 0 ? void 0 : (_config$hooks$validat = _config$hooks.validateInput) === null || _config$hooks$validat === void 0 ? void 0 : _config$hooks$validat.call(_config$hooks, args));
        }

      }),
      input: {
        uniqueWhere: isIndexed === 'unique' ? {
          arg: apiWithoutContext.arg({
            type: apiWithoutContext.String
          })
        } : undefined,
        where: {
          arg: apiWithoutContext.arg({
            type: jsonFieldTypePolyfillForSqlite.filters[meta.provider].String[mode]
          }),
          resolve: mode === 'required' ? undefined : jsonFieldTypePolyfillForSqlite.resolveString
        },
        create: {
          arg: apiWithoutContext.arg({
            type: (_config$graphql = config.graphql) !== null && _config$graphql !== void 0 && (_config$graphql$creat = _config$graphql.create) !== null && _config$graphql$creat !== void 0 && _config$graphql$creat.isNonNull ? apiWithoutContext.nonNull(apiWithoutContext.String) : apiWithoutContext.String,
            defaultValue: (_config$graphql2 = config.graphql) !== null && _config$graphql2 !== void 0 && (_config$graphql2$crea = _config$graphql2.create) !== null && _config$graphql2$crea !== void 0 && _config$graphql2$crea.isNonNull ? defaultValue : undefined
          }),

          resolve(val) {
            if (val === undefined) {
              return defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
            }

            return val;
          }

        },
        update: {
          arg: apiWithoutContext.arg({
            type: apiWithoutContext.String
          })
        },
        orderBy: {
          arg: apiWithoutContext.arg({
            type: sqlite.orderDirectionEnum
          })
        }
      },
      output: apiWithContext.field({
        type: (_config$graphql3 = config.graphql) !== null && _config$graphql3 !== void 0 && (_config$graphql3$read = _config$graphql3.read) !== null && _config$graphql3$read !== void 0 && _config$graphql3$read.isNonNull ? apiWithoutContext.nonNull(apiWithoutContext.String) : apiWithoutContext.String
      }),
      views: resolveView('text/views'),

      getAdminMeta() {
        var _config$ui$displayMod, _config$ui, _validation$isRequire, _validation$match$exp, _validation$length$ma, _validation$length11, _validation$length$mi2, _validation$length12;

        return {
          displayMode: (_config$ui$displayMod = (_config$ui = config.ui) === null || _config$ui === void 0 ? void 0 : _config$ui.displayMode) !== null && _config$ui$displayMod !== void 0 ? _config$ui$displayMod : 'input',
          shouldUseModeInsensitive: meta.provider === 'postgresql',
          validation: {
            isRequired: (_validation$isRequire = validation === null || validation === void 0 ? void 0 : validation.isRequired) !== null && _validation$isRequire !== void 0 ? _validation$isRequire : false,
            match: validation !== null && validation !== void 0 && validation.match ? {
              regex: {
                source: validation.match.regex.source,
                flags: validation.match.regex.flags
              },
              explanation: (_validation$match$exp = validation.match.explanation) !== null && _validation$match$exp !== void 0 ? _validation$match$exp : null
            } : null,
            length: {
              max: (_validation$length$ma = validation === null || validation === void 0 ? void 0 : (_validation$length11 = validation.length) === null || _validation$length11 === void 0 ? void 0 : _validation$length11.max) !== null && _validation$length$ma !== void 0 ? _validation$length$ma : null,
              min: (_validation$length$mi2 = validation === null || validation === void 0 ? void 0 : (_validation$length12 = validation.length) === null || _validation$length12 === void 0 ? void 0 : _validation$length12.min) !== null && _validation$length$mi2 !== void 0 ? _validation$length$mi2 : null
            }
          },
          defaultValue: defaultValue !== null && defaultValue !== void 0 ? defaultValue : isNullable ? null : '',
          isNullable
        };
      }

    }));
  };
};

const _excluded$1 = ["isIndexed", "validation", "defaultValue"];
const timestamp = function () {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  let {
    isIndexed,
    validation,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$1);

  return meta => {
    var _config$label, _config$db, _config$db2, _config$graphql, _config$graphql$creat, _config$graphql2, _config$graphql2$crea, _config$graphql3, _config$graphql3$read;

    if (typeof defaultValue === 'string') {
      try {
        graphqlTsSchema.DateTime.graphQLType.parseValue(defaultValue);
      } catch (err) {
        throw new Error(`The timestamp field at ${meta.listKey}.${meta.fieldKey} specifies defaultValue: ${defaultValue} but values must be provided as a full ISO8601 date-time string such as ${new Date().toISOString()}`);
      }
    }

    const parsedDefaultValue = typeof defaultValue === 'string' ? graphqlTsSchema.DateTime.graphQLType.parseValue(defaultValue) : defaultValue;
    const resolvedIsNullable = getResolvedIsNullable(validation, config.db);
    assertReadIsNonNullAllowed(meta, config, resolvedIsNullable);
    assertCreateIsNonNullAllowed(meta, config);
    const mode = resolvedIsNullable === false ? 'required' : 'optional';
    const fieldLabel = (_config$label = config.label) !== null && _config$label !== void 0 ? _config$label : graphqlErrors.humanize(meta.fieldKey);
    return sqlite.fieldType({
      kind: 'scalar',
      mode,
      scalar: 'DateTime',
      index: isIndexed === true ? 'index' : isIndexed || undefined,
      default: typeof defaultValue === 'string' ? {
        kind: 'literal',
        value: defaultValue
      } : defaultValue === undefined ? undefined : {
        kind: 'now'
      },
      updatedAt: (_config$db = config.db) === null || _config$db === void 0 ? void 0 : _config$db.updatedAt,
      map: (_config$db2 = config.db) === null || _config$db2 === void 0 ? void 0 : _config$db2.map
    })(_objectSpread(_objectSpread({}, config), {}, {
      hooks: _objectSpread(_objectSpread({}, config.hooks), {}, {
        async validateInput(args) {
          var _config$hooks, _config$hooks$validat;

          const value = args.resolvedData[meta.fieldKey];

          if ((validation !== null && validation !== void 0 && validation.isRequired || resolvedIsNullable === false) && value === null) {
            args.addValidationError(`${fieldLabel} is required`);
          }

          await ((_config$hooks = config.hooks) === null || _config$hooks === void 0 ? void 0 : (_config$hooks$validat = _config$hooks.validateInput) === null || _config$hooks$validat === void 0 ? void 0 : _config$hooks$validat.call(_config$hooks, args));
        }

      }),
      input: {
        uniqueWhere: isIndexed === 'unique' ? {
          arg: apiWithoutContext.arg({
            type: graphqlTsSchema.DateTime
          })
        } : undefined,
        where: {
          arg: apiWithoutContext.arg({
            type: jsonFieldTypePolyfillForSqlite.filters[meta.provider].DateTime[mode]
          }),
          resolve: mode === 'optional' ? jsonFieldTypePolyfillForSqlite.resolveCommon : undefined
        },
        create: {
          arg: apiWithoutContext.arg({
            type: (_config$graphql = config.graphql) !== null && _config$graphql !== void 0 && (_config$graphql$creat = _config$graphql.create) !== null && _config$graphql$creat !== void 0 && _config$graphql$creat.isNonNull ? apiWithoutContext.nonNull(graphqlTsSchema.DateTime) : graphqlTsSchema.DateTime,
            defaultValue: (_config$graphql2 = config.graphql) !== null && _config$graphql2 !== void 0 && (_config$graphql2$crea = _config$graphql2.create) !== null && _config$graphql2$crea !== void 0 && _config$graphql2$crea.isNonNull && parsedDefaultValue instanceof Date ? parsedDefaultValue : undefined
          }),

          resolve(val) {
            if (val === undefined) {
              var _config$db3;

              if (parsedDefaultValue === undefined && (_config$db3 = config.db) !== null && _config$db3 !== void 0 && _config$db3.updatedAt) {
                return undefined;
              }

              if (parsedDefaultValue instanceof Date || parsedDefaultValue === undefined) {
                val = parsedDefaultValue !== null && parsedDefaultValue !== void 0 ? parsedDefaultValue : null;
              } else {
                val = new Date();
              }
            }

            return val;
          }

        },
        update: {
          arg: apiWithoutContext.arg({
            type: graphqlTsSchema.DateTime
          })
        },
        orderBy: {
          arg: apiWithoutContext.arg({
            type: sqlite.orderDirectionEnum
          })
        }
      },
      output: apiWithContext.field({
        type: (_config$graphql3 = config.graphql) !== null && _config$graphql3 !== void 0 && (_config$graphql3$read = _config$graphql3.read) !== null && _config$graphql3$read !== void 0 && _config$graphql3$read.isNonNull ? apiWithoutContext.nonNull(graphqlTsSchema.DateTime) : graphqlTsSchema.DateTime
      }),
      views: resolveView('timestamp/views'),

      getAdminMeta() {
        var _validation$isRequire, _config$db$updatedAt, _config$db4;

        return {
          defaultValue: defaultValue !== null && defaultValue !== void 0 ? defaultValue : null,
          isRequired: (_validation$isRequire = validation === null || validation === void 0 ? void 0 : validation.isRequired) !== null && _validation$isRequire !== void 0 ? _validation$isRequire : false,
          updatedAt: (_config$db$updatedAt = (_config$db4 = config.db) === null || _config$db4 === void 0 ? void 0 : _config$db4.updatedAt) !== null && _config$db$updatedAt !== void 0 ? _config$db$updatedAt : false
        };
      }

    }));
  };
};

const _excluded = ["field"];
const virtual = _ref => {
  let {
    field
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded);

  return meta => {
    var _config$ui, _config$ui2, _config$ui2$itemView, _config$ui3, _config$ui3$listView;

    const usableField = typeof field === 'function' ? field(meta.lists) : field;
    const namedType = graphql.getNamedType(usableField.type.graphQLType);
    const hasRequiredArgs = usableField.args && Object.values(usableField.args).some(x => x.type.kind === 'non-null' && x.defaultValue === undefined);

    if ((!graphql.isLeafType(namedType) || hasRequiredArgs) && !((_config$ui = config.ui) !== null && _config$ui !== void 0 && _config$ui.query) && (((_config$ui2 = config.ui) === null || _config$ui2 === void 0 ? void 0 : (_config$ui2$itemView = _config$ui2.itemView) === null || _config$ui2$itemView === void 0 ? void 0 : _config$ui2$itemView.fieldMode) !== 'hidden' || ((_config$ui3 = config.ui) === null || _config$ui3 === void 0 ? void 0 : (_config$ui3$listView = _config$ui3.listView) === null || _config$ui3$listView === void 0 ? void 0 : _config$ui3$listView.fieldMode) !== 'hidden')) {
      throw new Error(`The virtual field at ${meta.listKey}.${meta.fieldKey} requires a selection for the Admin UI but ui.query is unspecified and ui.listView.fieldMode and ui.itemView.fieldMode are not both set to 'hidden'.\n` + `Either set ui.query with what the Admin UI should fetch or hide the field from the Admin UI by setting ui.listView.fieldMode and ui.itemView.fieldMode to 'hidden'.\n` + `When setting ui.query, it is interpolated into a GraphQL query like this:\n` + `query {\n` + `  ${core.getGqlNames({
        listKey: meta.listKey,
        pluralGraphQLName: ''
      }).itemQueryName}(where: { id: "..." }) {\n` + `    ${meta.fieldKey}\${ui.query}\n` + `  }\n` + `}`);
    }

    return sqlite.fieldType({
      kind: 'none'
    })(_objectSpread(_objectSpread({}, config), {}, {
      output: apiWithContext.field(_objectSpread(_objectSpread({}, usableField), {}, {
        resolve(_ref2) {
          let {
            item
          } = _ref2;

          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          return usableField.resolve(item, ...args);
        }

      })),
      views: resolveView('virtual/views'),
      getAdminMeta: () => {
        var _config$ui4;

        return {
          query: ((_config$ui4 = config.ui) === null || _config$ui4 === void 0 ? void 0 : _config$ui4.query) || ''
        };
      }
    }));
  };
};

exports.checkbox = checkbox;
exports.decimal = decimal;
exports.file = file;
exports.float = float;
exports.image = image;
exports.integer = integer;
exports.json = json;
exports.password = password;
exports.relationship = relationship;
exports.select = select;
exports.text = text;
exports.timestamp = timestamp;
exports.virtual = virtual;
