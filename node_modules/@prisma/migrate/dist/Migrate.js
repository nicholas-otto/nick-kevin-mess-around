var __create = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
var __name2 = (target, value) => __defProp2(target, "name", { value, configurable: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp2(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  Migrate: () => Migrate
});
var import_debug = __toModule(require("@prisma/debug"));
var import_engines_version = __toModule(require("@prisma/engines-version"));
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var import_fs = __toModule(require("fs"));
var import_log_update = __toModule(require("log-update"));
var import_path = __toModule(require("path"));
var import_MigrateEngine = __toModule(require("./MigrateEngine"));
var import_errors = __toModule(require("./utils/errors"));
var __defProp = Object.defineProperty;
var __name = /* @__PURE__ */ __name2((target, value) => __defProp(target, "name", { value, configurable: true }), "__name");
const debug = (0, import_debug.default)("prisma:migrate");
const packageJson = eval(`require('../package.json')`);
class Migrate {
  constructor(schemaPath, enabledPreviewFeatures) {
    if (schemaPath) {
      this.schemaPath = this.getSchemaPath(schemaPath);
      this.migrationsDirectoryPath = import_path.default.join(import_path.default.dirname(this.schemaPath), "migrations");
      this.engine = new import_MigrateEngine.MigrateEngine({
        projectDir: import_path.default.dirname(this.schemaPath),
        schemaPath: this.schemaPath,
        enabledPreviewFeatures
      });
    } else {
      this.engine = new import_MigrateEngine.MigrateEngine({
        projectDir: process.cwd(),
        enabledPreviewFeatures
      });
    }
  }
  stop() {
    this.engine.stop();
  }
  getSchemaPath(schemaPathFromOptions) {
    const schemaPath = (0, import_sdk.getSchemaPathSync)(schemaPathFromOptions);
    if (!schemaPath) {
      throw new import_errors.NoSchemaFoundError();
    }
    return schemaPath;
  }
  getDatamodel() {
    if (!this.schemaPath)
      throw new Error("this.schemaPath is undefined");
    return import_fs.default.readFileSync(this.schemaPath, "utf-8");
  }
  reset() {
    return this.engine.reset();
  }
  createMigration(params) {
    return this.engine.createMigration(params);
  }
  diagnoseMigrationHistory({
    optInToShadowDatabase
  }) {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    return this.engine.diagnoseMigrationHistory({
      migrationsDirectoryPath: this.migrationsDirectoryPath,
      optInToShadowDatabase
    });
  }
  listMigrationDirectories() {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    return this.engine.listMigrationDirectories({
      migrationsDirectoryPath: this.migrationsDirectoryPath
    });
  }
  devDiagnostic() {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    return this.engine.devDiagnostic({
      migrationsDirectoryPath: this.migrationsDirectoryPath
    });
  }
  async markMigrationApplied({ migrationId }) {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    return await this.engine.markMigrationApplied({
      migrationsDirectoryPath: this.migrationsDirectoryPath,
      migrationName: migrationId
    });
  }
  markMigrationRolledBack({ migrationId }) {
    return this.engine.markMigrationRolledBack({
      migrationName: migrationId
    });
  }
  applyMigrations() {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    return this.engine.applyMigrations({
      migrationsDirectoryPath: this.migrationsDirectoryPath
    });
  }
  evaluateDataLoss() {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    const datamodel = this.getDatamodel();
    return this.engine.evaluateDataLoss({
      migrationsDirectoryPath: this.migrationsDirectoryPath,
      prismaSchema: datamodel
    });
  }
  async push({ force = false }) {
    const datamodel = this.getDatamodel();
    const { warnings, unexecutable, executedSteps } = await this.engine.schemaPush({
      force,
      schema: datamodel
    });
    return {
      executedSteps,
      warnings,
      unexecutable
    };
  }
  async tryToRunGenerate() {
    if (!this.schemaPath)
      throw new Error("this.schemaPath is undefined");
    const message = [];
    console.info();
    (0, import_log_update.default)(`Running generate... ${import_chalk.default.dim("(Use --skip-generate to skip the generators)")}`);
    const generators = await (0, import_sdk.getGenerators)({
      schemaPath: this.schemaPath,
      printDownloadProgress: true,
      version: import_engines_version.enginesVersion,
      cliVersion: packageJson.version
    });
    for (const generator of generators) {
      (0, import_log_update.default)(`Running generate... - ${generator.getPrettyName()}`);
      const before = Date.now();
      try {
        await generator.generate();
        const after = Date.now();
        message.push((0, import_sdk.getGeneratorSuccessMessage)(generator, after - before));
        generator.stop();
      } catch (e) {
        message.push(`${e.message}`);
        generator.stop();
      }
    }
    (0, import_log_update.default)(message.join("\n"));
  }
}
__name2(Migrate, "Migrate");
__name(Migrate, "Migrate");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Migrate
});
