import { MigrateEngine } from './MigrateEngine';
import type { EngineArgs, EngineResults } from './types';
export declare class Migrate {
    engine: MigrateEngine;
    private schemaPath?;
    migrationsDirectoryPath?: string;
    constructor(schemaPath?: string, enabledPreviewFeatures?: string[]);
    stop(): void;
    getSchemaPath(schemaPathFromOptions?: any): string;
    getDatamodel(): string;
    reset(): Promise<void>;
    createMigration(params: EngineArgs.CreateMigrationInput): Promise<EngineResults.CreateMigrationOutput>;
    diagnoseMigrationHistory({ optInToShadowDatabase, }: {
        optInToShadowDatabase: boolean;
    }): Promise<EngineResults.DiagnoseMigrationHistoryOutput>;
    listMigrationDirectories(): Promise<EngineResults.ListMigrationDirectoriesOutput>;
    devDiagnostic(): Promise<EngineResults.DevDiagnosticOutput>;
    markMigrationApplied({ migrationId }: {
        migrationId: string;
    }): Promise<void>;
    markMigrationRolledBack({ migrationId }: {
        migrationId: string;
    }): Promise<void>;
    applyMigrations(): Promise<EngineResults.ApplyMigrationsOutput>;
    evaluateDataLoss(): Promise<EngineResults.EvaluateDataLossOutput>;
    push({ force }: {
        force?: boolean;
    }): Promise<EngineResults.SchemaPush>;
    tryToRunGenerate(): Promise<void>;
}
