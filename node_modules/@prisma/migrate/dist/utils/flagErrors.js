var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  EarlyAccessFeatureFlagWithMigrateError: () => EarlyAccessFeatureFlagWithMigrateError,
  EarlyAcessFlagError: () => EarlyAcessFlagError,
  ExperimentalFlagError: () => ExperimentalFlagError,
  ExperimentalFlagWithMigrateError: () => ExperimentalFlagWithMigrateError,
  PreviewFlagError: () => PreviewFlagError
});
var import_chalk = __toModule(require("chalk"));
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
class ExperimentalFlagError extends Error {
  constructor() {
    super(`Please provide the ${import_chalk.default.green("--experimental")} flag to use this command.`);
  }
}
__name(ExperimentalFlagError, "ExperimentalFlagError");
__name2(ExperimentalFlagError, "ExperimentalFlagError");
class PreviewFlagError extends Error {
  constructor() {
    super(`This feature is currently in Preview. There may be bugs and it's not recommended to use it in production environments.
Please provide the ${import_chalk.default.green("--preview-feature")} flag to use this command.`);
  }
}
__name(PreviewFlagError, "PreviewFlagError");
__name2(PreviewFlagError, "PreviewFlagError");
class EarlyAcessFlagError extends Error {
  constructor() {
    super(`This feature is currently in Early Access. There may be bugs and it's not recommended to use it in production environments.
Please provide the ${import_chalk.default.green("--early-access-feature")} flag to use this command.`);
  }
}
__name(EarlyAcessFlagError, "EarlyAcessFlagError");
__name2(EarlyAcessFlagError, "EarlyAcessFlagError");
class ExperimentalFlagWithMigrateError extends Error {
  constructor() {
    super(`Prisma Migrate was Experimental and is now Generally Available.
${import_chalk.default.yellow("WARNING this new version has some breaking changes")} to use it it's recommended to read the documentation first and remove the ${import_chalk.default.red("--experimental")} flag.`);
  }
}
__name(ExperimentalFlagWithMigrateError, "ExperimentalFlagWithMigrateError");
__name2(ExperimentalFlagWithMigrateError, "ExperimentalFlagWithMigrateError");
class EarlyAccessFeatureFlagWithMigrateError extends Error {
  constructor() {
    super(`Prisma Migrate was in Early Access and is now Generally Available.
Remove the ${import_chalk.default.red("--early-access-feature")} flag.`);
  }
}
__name(EarlyAccessFeatureFlagWithMigrateError, "EarlyAccessFeatureFlagWithMigrateError");
__name2(EarlyAccessFeatureFlagWithMigrateError, "EarlyAccessFeatureFlagWithMigrateError");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EarlyAccessFeatureFlagWithMigrateError,
  EarlyAcessFlagError,
  ExperimentalFlagError,
  ExperimentalFlagWithMigrateError,
  PreviewFlagError
});
