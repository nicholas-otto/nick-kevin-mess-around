var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  CLI: () => CLI
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
const _CLI = /* @__PURE__ */ __name(class {
  constructor(cmds) {
    this.cmds = cmds;
  }
  static new(cmds) {
    return new _CLI(cmds);
  }
  async parse(argv) {
    const args = (0, import_sdk.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--json": Boolean,
      "--experimental": Boolean,
      "--preview-feature": Boolean,
      "--early-access-feature": Boolean,
      "--telemetry-information": String
    });
    if ((0, import_sdk.isError)(args)) {
      return this.help(args.message);
    }
    if (args._.length === 0 || args["--help"]) {
      return this.help();
    }
    const cmdName = args._[0];
    const cmd = this.cmds[cmdName];
    if (cmd) {
      let argsForCmd;
      if (args["--experimental"]) {
        argsForCmd = [...args._.slice(1), `--experimental=${args["--experimental"]}`];
      } else if (args["--preview-feature"]) {
        argsForCmd = [...args._.slice(1), `--preview-feature=${args["--preview-feature"]}`];
      } else if (args["--early-access-feature"]) {
        argsForCmd = [...args._.slice(1), `--early-access-feature=${args["--early-access-feature"]}`];
      } else {
        argsForCmd = args._.slice(1);
      }
      return cmd.parse(argsForCmd);
    }
    return (0, import_sdk.unknownCommand)(this.help(), args._[0]);
  }
  help(error) {
    if (error) {
      return new import_sdk.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_CLI.help}`);
    }
    return _CLI.help;
  }
}, "_CLI");
let CLI = _CLI;
__name2(CLI, "CLI");
CLI.help = (0, import_sdk.format)(`This is the internal CLI for @prisma/migrate`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CLI
});
