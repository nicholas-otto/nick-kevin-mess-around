var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  DbExecute: () => DbExecute
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var import_fs = __toModule(require("fs"));
var import_get_stdin = __toModule(require("get-stdin"));
var import_path = __toModule(require("path"));
var import_Migrate = __toModule(require("../Migrate"));
var import_errors = __toModule(require("../utils/errors"));
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
const helpOptions = (0, import_sdk.format)(`${import_chalk.default.bold("Usage")}

${import_chalk.default.dim("$")} prisma db execute --preview-feature [options]

${import_chalk.default.bold("Options")}

-h, --help            Display this help message

${import_chalk.default.italic("Datasource input, only 1 must be provided:")}
--url                 URL of the datasource to run the command on
--schema              Path to your Prisma schema file to take the datasource URL from

${import_chalk.default.italic("Script input, only 1 must be provided:")}
--file                Path to a file. The content will be sent as the script to be executed

${import_chalk.default.bold("Flags")}

--preview-feature    Run Preview Prisma commands
--stdin              Use the terminal standard input as the script to be executed`);
const _DbExecute = /* @__PURE__ */ __name(class {
  static new() {
    return new _DbExecute();
  }
  async parse(argv) {
    const args = (0, import_sdk.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--stdin": Boolean,
      "--file": String,
      "--schema": String,
      "--url": String,
      "--preview-feature": Boolean,
      "--telemetry-information": String
    }, false);
    if ((0, import_sdk.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (!args["--preview-feature"]) {
      throw new import_errors.DbExecuteNeedsPreviewFeatureFlagError();
    }
    (0, import_sdk.loadEnvFile)(args["--schema"], false);
    if (args["--stdin"] && args["--file"]) {
      throw new Error(`--stdin and --file cannot be used at the same time. Only 1 must be provided. 
See \`${import_chalk.default.green((0, import_sdk.getCommandWithExecutor)("prisma db execute -h"))}\``);
    } else if (!args["--stdin"] && !args["--file"]) {
      throw new Error(`Either --stdin or --file must be provided.
See \`${import_chalk.default.green((0, import_sdk.getCommandWithExecutor)("prisma db execute -h"))}\``);
    }
    if (args["--url"] && args["--schema"]) {
      throw new Error(`--url and --schema cannot be used at the same time. Only 1 must be provided.
See \`${import_chalk.default.green((0, import_sdk.getCommandWithExecutor)("prisma db execute -h"))}\``);
    } else if (!args["--url"] && !args["--schema"]) {
      throw new Error(`Either --url or --schema must be provided.
See \`${import_chalk.default.green((0, import_sdk.getCommandWithExecutor)("prisma db execute -h"))}\``);
    }
    let script = "";
    if (args["--file"]) {
      try {
        script = import_fs.default.readFileSync(import_path.default.resolve(args["--file"]), "utf-8");
      } catch (e) {
        if (e.code === "ENOENT") {
          throw new Error(`Provided --file at ${args["--file"]} doesn't exist.`);
        } else {
          console.error(`An error occurred while reading the provided --file at ${args["--file"]}`);
          throw e;
        }
      }
    }
    if (args["--stdin"]) {
      script = await (0, import_get_stdin.default)();
    }
    let datasourceType;
    if (args["--url"]) {
      datasourceType = {
        tag: "url",
        url: args["--url"]
      };
    } else {
      const schemaPath = await (0, import_sdk.getSchemaPath)(args["--schema"]);
      datasourceType = {
        tag: "schema",
        schema: schemaPath
      };
    }
    const migrate = new import_Migrate.Migrate();
    try {
      await migrate.engine.dbExecute({
        script,
        datasourceType
      });
    } finally {
      migrate.stop();
    }
    return `Script executed successfully.`;
  }
  help(error) {
    if (error) {
      throw new import_sdk.HelpError(`
${error}

${helpOptions}`);
    }
    return _DbExecute.help;
  }
}, "_DbExecute");
let DbExecute = _DbExecute;
__name2(DbExecute, "DbExecute");
DbExecute.help = (0, import_sdk.format)(`
${process.platform === "win32" ? "" : import_chalk.default.bold("\u{1F4DD} ")}Execute native commands to your database

${import_chalk.default.bold.yellow("WARNING")} ${import_chalk.default.bold(`${import_chalk.default.green(`prisma db execute`)} is currently in Preview (${(0, import_sdk.link)("https://pris.ly/d/preview")}).
There may be bugs and it's not recommended to use it in production environments.`)}

This command takes as input a datasource, using ${import_chalk.default.green(`--url`)} or ${import_chalk.default.green(`--schema`)} and a script, using ${import_chalk.default.green(`--stdin`)} or ${import_chalk.default.green(`--file`)}.
The input parameters are mutually exclusive, only 1 of each (datasource & script) must be provided.
 
The output of the command is connector-specific, and is not meant for returning data, but only to report success or failure.

On SQL databases, this command takes as input a SQL script.
The whole script will be sent as a single command to the database.

${import_chalk.default.italic(`This command is currently not supported on MongoDB.`)}

${helpOptions}
${import_chalk.default.bold("Examples")}
 
  Execute the content of a SQL script file to the datasource URL taken from the schema
  ${import_chalk.default.dim("$")} prisma db execute 
    --preview-feature \\
    --file ./script.sql \\
    --schema schema.prisma

  Execute the SQL script from stdin to the datasource URL specified via the \`DATABASE_URL\` environment variable
  ${import_chalk.default.dim("$")} echo 'TRUNCATE TABLE dev;' | \\
    prisma db execute \\
    --preview-feature \\
    --stdin \\
    --url="$DATABASE_URL"

  Like previous example, but exposing the datasource url credentials to your terminal history
  ${import_chalk.default.dim("$")} echo 'TRUNCATE TABLE dev;' | \\
    prisma db execute \\
    --preview-feature \\
    --stdin \\
    --url="mysql://root:root@localhost/mydb"
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DbExecute
});
