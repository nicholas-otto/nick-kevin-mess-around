var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  MigrateCommand: () => MigrateCommand
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var import_flagErrors = __toModule(require("../utils/flagErrors"));
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
const _MigrateCommand = /* @__PURE__ */ __name(class {
  constructor(cmds) {
    this.cmds = cmds;
  }
  static new(cmds) {
    return new _MigrateCommand(cmds);
  }
  async parse(argv) {
    const args = (0, import_sdk.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--experimental": Boolean,
      "--preview-feature": Boolean,
      "--early-access-feature": Boolean,
      "--telemetry-information": String
    });
    if ((0, import_sdk.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--experimental"]) {
      throw new import_flagErrors.ExperimentalFlagWithMigrateError();
    }
    if (args._.length === 0 || args["--help"]) {
      return this.help();
    }
    const commandName = args._[0];
    if (["up", "save", "down"].includes(commandName)) {
      throw new Error(`The current command "${args._[0]}" doesn't exist in the new version of Prisma Migrate.
Read more about how to upgrade: ${(0, import_sdk.link)("https://pris.ly/d/migrate-upgrade")}`);
    }
    if (args["--preview-feature"]) {
      import_sdk.logger.warn(`Prisma Migrate was in Preview and is now Generally Available.
You can now remove the ${import_chalk.default.red("--preview-feature")} flag.`);
    }
    const cmd = this.cmds[commandName];
    if (cmd) {
      let argsForCmd;
      if (commandName === "diff") {
        argsForCmd = args["--preview-feature"] ? [...args._.slice(1), `--preview-feature`] : args._.slice(1);
      } else {
        const filteredArgs = args._.filter((item) => item !== "--preview-feature");
        argsForCmd = filteredArgs.slice(1);
      }
      return cmd.parse(argsForCmd);
    }
    return (0, import_sdk.unknownCommand)(_MigrateCommand.help, commandName);
  }
  help(error) {
    if (error) {
      return new import_sdk.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_MigrateCommand.help}`);
    }
    return _MigrateCommand.help;
  }
}, "_MigrateCommand");
let MigrateCommand = _MigrateCommand;
__name2(MigrateCommand, "MigrateCommand");
MigrateCommand.help = (0, import_sdk.format)(`
Update the database schema with migrations
  
${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma migrate [command] [options]

${import_chalk.default.bold("Commands for development")}

         dev   Create a migration from changes in Prisma schema, apply it to the database
               trigger generators (e.g. Prisma Client)
       reset   Reset your database and apply all migrations, all data will be lost

${import_chalk.default.bold("Commands for production/staging")}

      deploy   Apply pending migrations to the database 
      status   Check the status of your database migrations
     resolve   Resolve issues with database migrations, i.e. baseline, failed migration, hotfix

${import_chalk.default.bold("Command for any stage")}
        diff   Compare the database schema from two arbitrary sources (Preview)

${import_chalk.default.bold("Options")}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

${import_chalk.default.bold("Examples")}

  Create a migration from changes in Prisma schema, apply it to the database, trigger generators (e.g. Prisma Client)
  ${import_chalk.default.dim("$")} prisma migrate dev

  Reset your database and apply all migrations
  ${import_chalk.default.dim("$")} prisma migrate reset

  Apply pending migrations to the database in production/staging
  ${import_chalk.default.dim("$")} prisma migrate deploy

  Check the status of migrations in the production/staging database
  ${import_chalk.default.dim("$")} prisma migrate status

  Specify a schema
  ${import_chalk.default.dim("$")} prisma migrate status --schema=./schema.prisma

  Compare the database schema from two databases and render the diff as a SQL script (Preview)
  ${import_chalk.default.dim("$")} prisma migrate diff \\
    --preview-feature \\
    --from-url "$DATABASE_URL" \\
    --to-url "postgresql://login:password@localhost:5432/db" \\
    --script
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MigrateCommand
});
