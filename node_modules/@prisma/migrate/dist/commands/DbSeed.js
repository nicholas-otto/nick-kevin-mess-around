var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  DbSeed: () => DbSeed
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var import_seed = __toModule(require("../utils/seed"));
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
const _DbSeed = /* @__PURE__ */ __name(class {
  static new() {
    return new _DbSeed();
  }
  async parse(argv) {
    const args = (0, import_sdk.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--preview-feature": Boolean,
      "--schema": String,
      "--telemetry-information": String
    }, false);
    if ((0, import_sdk.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (args["--preview-feature"]) {
      import_sdk.logger.warn(`Prisma "db seed" was in Preview and is now Generally Available.
You can now remove the ${import_chalk.default.red("--preview-feature")} flag.`);
      await (0, import_seed.legacyTsNodeScriptWarning)();
    }
    (0, import_sdk.loadEnvFile)(args["--schema"], true);
    if (args["--schema"]) {
      import_sdk.logger.warn(import_chalk.default.yellow(`The "--schema" parameter is not used anymore by "prisma db seed" since version 3.0 and can now be removed.`));
    }
    const seedCommandFromPkgJson = await (0, import_seed.getSeedCommandFromPackageJson)(process.cwd());
    if (!seedCommandFromPkgJson) {
      const schemaPath = await (0, import_sdk.getSchemaPath)(args["--schema"]);
      const message = await (0, import_seed.verifySeedConfigAndReturnMessage)(schemaPath);
      if (message) {
        throw new Error(message);
      }
      return ``;
    }
    const successfulSeeding = await (0, import_seed.executeSeedCommand)(seedCommandFromPkgJson);
    if (successfulSeeding) {
      return `
${process.platform === "win32" ? "" : "\u{1F331}  "}The seed command has been executed.`;
    } else {
      process.exit(1);
      return ``;
    }
  }
  help(error) {
    if (error) {
      return new import_sdk.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_DbSeed.help}`);
    }
    return _DbSeed.help;
  }
}, "_DbSeed");
let DbSeed = _DbSeed;
__name2(DbSeed, "DbSeed");
DbSeed.help = (0, import_sdk.format)(`
${process.platform === "win32" ? "" : import_chalk.default.bold("\u{1F64C}  ")}Seed your database

${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma db seed [options]

${import_chalk.default.bold("Options")}

  -h, --help   Display this help message
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DbSeed
});
