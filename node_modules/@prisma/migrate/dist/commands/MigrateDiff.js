var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  MigrateDiff: () => MigrateDiff
});
var import_debug = __toModule(require("@prisma/debug"));
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var import_path = __toModule(require("path"));
var import_Migrate = __toModule(require("../Migrate"));
var import_errors = __toModule(require("../utils/errors"));
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
const debug = (0, import_debug.default)("prisma:migrate:diff");
const helpOptions = (0, import_sdk.format)(`${import_chalk.default.bold("Usage")}

${import_chalk.default.dim("$")} prisma migrate diff --preview-feature [options]

${import_chalk.default.bold("Options")}

-h, --help                                         Display this help message

${import_chalk.default.italic("From and To inputs (1 `--from-...` and 1 `--to-...` must be provided):")}
--from-url / --to-url                              A datasource URL
--from-empty / --to-empty                          Flag to assume from or to is an empty datamodel
--from-schema-datamodel / --to-schema-datamodel    Path to a Prisma schema file, uses the datamodel for the diff
--from-schema-datasource / --to-schema-datasource  Path to a Prisma schema file, uses the datasource url for the diff
--from-migrations / --to-migrations                Path to the Prisma Migrate migrations directory

${import_chalk.default.italic("Shadow database (only required if using --from-migrations or --to-migrations):")}
--shadow-database-url                              URL for the shadow database

${import_chalk.default.italic("Output format:")}
--script                                           Render a SQL script to stdout instead of the default human readable summary (not supported on MongoDB)

${import_chalk.default.bold("Flags")}

--preview-feature                                  Run Preview Prisma commands
--exit-code                                        Change the exit code behavior to signal if diff is empty or not (Empty: 0, Error: 1, Not empty: 2)`);
const _MigrateDiff = /* @__PURE__ */ __name(class {
  static new() {
    return new _MigrateDiff();
  }
  async parse(argv) {
    const args = (0, import_sdk.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--from-empty": Boolean,
      "--from-schema-datasource": String,
      "--from-schema-datamodel": String,
      "--from-url": String,
      "--from-migrations": String,
      "--to-empty": Boolean,
      "--to-schema-datasource": String,
      "--to-schema-datamodel": String,
      "--to-url": String,
      "--to-migrations": String,
      "--shadow-database-url": String,
      "--script": Boolean,
      "--exit-code": Boolean,
      "--preview-feature": Boolean,
      "--telemetry-information": String
    }, false);
    if ((0, import_sdk.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (!args["--preview-feature"]) {
      throw new import_errors.MigrateDiffNeedsPreviewFeatureFlagError();
    }
    const numberOfFromParameterProvided = Number(Boolean(args["--from-empty"])) + Number(Boolean(args["--from-schema-datasource"])) + Number(Boolean(args["--from-schema-datamodel"])) + Number(Boolean(args["--from-url"])) + Number(Boolean(args["--from-migrations"]));
    const numberOfToParameterProvided = Number(Boolean(args["--to-empty"])) + Number(Boolean(args["--to-schema-datasource"])) + Number(Boolean(args["--to-schema-datamodel"])) + Number(Boolean(args["--to-url"])) + Number(Boolean(args["--to-migrations"]));
    if (numberOfFromParameterProvided !== 1 || numberOfToParameterProvided !== 1) {
      const errorMessages = [];
      if (numberOfFromParameterProvided !== 1) {
        errorMessages.push(`${numberOfFromParameterProvided} \`--from-...\` parameter(s) provided. 1 must be provided.`);
      }
      if (numberOfToParameterProvided !== 1) {
        errorMessages.push(`${numberOfToParameterProvided} \`--to-...\` parameter(s) provided. 1 must be provided.`);
      }
      return this.help(`${errorMessages.join("\n")}`);
    }
    let from;
    if (args["--from-empty"]) {
      from = {
        tag: "empty"
      };
    } else if (args["--from-schema-datasource"]) {
      (0, import_sdk.loadEnvFile)(args["--from-schema-datasource"], false);
      from = {
        tag: "schemaDatasource",
        schema: import_path.default.resolve(args["--from-schema-datasource"])
      };
    } else if (args["--from-schema-datamodel"]) {
      from = {
        tag: "schemaDatamodel",
        schema: import_path.default.resolve(args["--from-schema-datamodel"])
      };
    } else if (args["--from-url"]) {
      from = {
        tag: "url",
        url: args["--from-url"]
      };
    } else if (args["--from-migrations"]) {
      from = {
        tag: "migrations",
        path: import_path.default.resolve(args["--from-migrations"])
      };
    }
    let to;
    if (args["--to-empty"]) {
      to = {
        tag: "empty"
      };
    } else if (args["--to-schema-datasource"]) {
      (0, import_sdk.loadEnvFile)(args["--to-schema-datasource"], false);
      to = {
        tag: "schemaDatasource",
        schema: import_path.default.resolve(args["--to-schema-datasource"])
      };
    } else if (args["--to-schema-datamodel"]) {
      to = {
        tag: "schemaDatamodel",
        schema: import_path.default.resolve(args["--to-schema-datamodel"])
      };
    } else if (args["--to-url"]) {
      to = {
        tag: "url",
        url: args["--to-url"]
      };
    } else if (args["--to-migrations"]) {
      to = {
        tag: "migrations",
        path: import_path.default.resolve(args["--to-migrations"])
      };
    }
    const migrate = new import_Migrate.Migrate();
    let result;
    try {
      result = await migrate.engine.migrateDiff({
        from,
        to,
        script: args["--script"] || false,
        shadowDatabaseUrl: args["--shadow-database-url"],
        exitCode: args["--exit-code"]
      });
    } finally {
      migrate.stop();
    }
    debug(result);
    if (args["--exit-code"] && result.exitCode) {
      process.exit(result.exitCode);
    }
    return ``;
  }
  help(error) {
    if (error) {
      throw new import_sdk.HelpError(`
${error}

${helpOptions}`);
    }
    return _MigrateDiff.help;
  }
}, "_MigrateDiff");
let MigrateDiff = _MigrateDiff;
__name2(MigrateDiff, "MigrateDiff");
MigrateDiff.help = (0, import_sdk.format)(`
${process.platform === "win32" ? "" : import_chalk.default.bold("\u{1F50D} ")}Compares the database schema from two arbitrary sources, and outputs the differences either as a human-readable summary (by default) or an executable script.

${import_chalk.default.bold.yellow("WARNING")} ${import_chalk.default.bold(`${import_chalk.default.green(`prisma migrate diff`)} is currently in Preview (${(0, import_sdk.link)("https://pris.ly/d/preview")}).
There may be bugs and it's not recommended to use it in production environments.`)}

${import_chalk.default.green(`prisma migrate diff`)} is a read-only command that does not write to your datasource(s).
${import_chalk.default.green(`prisma db execute`)} can be used to execute its ${import_chalk.default.green(`--script`)} output.

The command takes a source ${import_chalk.default.green(`--from-...`)} and a destination ${import_chalk.default.green(`--to-...`)}.
The source and destination must use the same provider,
e.g. a diff using 2 different providers like PostgreSQL and SQLite is not supported.

It compares the source with the destination to generate a diff. 
The diff can be interpreted as generating a migration that brings the source schema (from) to the shape of the destination schema (to).
The default output is a human readable diff, it can be rendered as SQL using \`--script\` on SQL databases.

See the documentation for more information ${(0, import_sdk.link)("https://pris.ly/d/migrate-diff")}

${helpOptions}
${import_chalk.default.bold("Examples")}
 
  From database to database as summary
    e.g. compare two live databases
  ${import_chalk.default.dim("$")} prisma migrate diff --preview-feature \\
    --from-url "$DATABASE_URL" \\
    --to-url "postgresql://login:password@localhost:5432/db2"
  
  From a live database to a Prisma datamodel
    e.g. roll forward after a migration failed in the middle
  ${import_chalk.default.dim("$")} prisma migrate diff --preview-feature \\
    --shadow-database-url "$SHADOW_DB" \\
    --from-url "$PROD_DB" \\
    --to-schema-datamodel=next_datamodel.prisma \\
    --script
  
  From a live database to a datamodel 
    e.g. roll backward after a migration failed in the middle
  ${import_chalk.default.dim("$")} prisma migrate diff --preview-feature \\
    --shadow-database-url "$SHADOW_DB" \\
    --from-url "$PROD_DB" \\
    --to-schema-datamodel=previous_datamodel.prisma \\
    --script
  
  From a Prisma Migrate \`migrations\` directory to another database
    e.g. generate a migration for a hotfix already applied on production
  ${import_chalk.default.dim("$")} prisma migrate diff --preview-feature \\
    --shadow-database-url "$SHADOW_DB" \\
    --from-migrations ./migrations \\
    --to-url "$PROD_DB" \\
    --script

  Execute the --script output with \`prisma db execute\` using bash pipe \`|\`
  ${import_chalk.default.dim("$")} prisma migrate diff --preview-feature \\
    --from-[...] \\
    --to-[...] \\
    --script | prisma db execute --preview-feature --stdin --url="$DATABASE_URL"

  Detect if both sources are in sync, it will exit with exit code 2 if changes are detected
  ${import_chalk.default.dim("$")} prisma migrate diff --preview-feature \\
    --exit-code \\
    --from-[...] \\
    --to-[...]
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MigrateDiff
});
