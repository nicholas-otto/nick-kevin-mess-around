/**
 * Utilties to wrap named `graphql-js` types into `@graphql-ts/schema` types.
 * Note that when using these functions, you're not provided with a lot of the
 * guarantees that `@graphql-ts/schema` will normally provide since the values
 * passed in don't include the necessary type information. These functions
 * return GraphQL types that accept/can be used as any type and can be used with
 * any context. If you know more specific types for the GraphQL types, you
 * should cast them with `as`.
 *
 * @module
 */
import { ObjectType, InputObjectType, EnumType, EnumValue, Arg, InputType, UnionType, InterfaceType, InterfaceField, OutputType } from "@graphql-ts/schema";
import { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLObjectType, GraphQLUnionType } from "graphql";
/**
 * Wraps an existing {@link GraphQLObjectType} into a {@link ObjectType} so that
 * it can be used in a GraphQL schema built with `@graphql-ts/schema`.
 *
 * ```ts
 * // this will likely be obtained from some existing GraphQLSchema
 * const someObjectType = new GraphQLObjectType({ ...etc });
 *
 * graphql.field({
 *   type: wrap.object(someObjectType),
 *   resolve() {
 *     // ...
 *   },
 * });
 * ```
 */
export declare function object(graphQLType: GraphQLObjectType): ObjectType<unknown, unknown>;
/**
 * Wraps an existing {@link GraphQLInputObjectType} into a {@link InputObjectType}
 * so that it can be used in a GraphQL schema built with `@graphql-ts/schema`.
 *
 * ```ts
 * // this will likely be obtained from some existing GraphQLSchema
 * const someInputObjectType = new GraphQLInputObjectType({ ...etc });
 *
 * graphql.field({
 *   type: graphql.String,
 *   args: {
 *     something: graphql.arg({ type: someInputObjectType }),
 *   },
 *   resolve(source, { something }) {
 *     console.log(something);
 *     // ...
 *   },
 * });
 * ```
 */
export declare function inputObject(graphQLType: GraphQLInputObjectType): InputObjectType<{
    [key: string]: Arg<InputType, boolean>;
}>;
/**
 * Wraps an existing {@link GraphQLEnumType} into a {@link EnumType} so that it
 * can be used in a GraphQL schema built with `@graphql-ts/schema`.
 *
 * ```ts
 * // this will likely be obtained from some existing GraphQLSchema
 * const someEnumType = new GraphQLEnumType({ ...etc });
 *
 * graphql.field({
 *   type: wrap.enum(someEnumType),
 *   args: {
 *     something: graphql.arg({ type: wrap.enum(someEnumType) }),
 *   },
 *   resolve(source, { something }) {
 *     console.log(something);
 *     // ...
 *   },
 * });
 * ```
 */
declare function enumType(graphQLType: GraphQLEnumType): EnumType<Record<string, EnumValue<unknown>>>;
export { enumType as enum };
/**
 * Wraps an existing {@link GraphQLUnionType} into a {@link UnionType} so that it
 * can be used in a GraphQL schema built with `@graphql-ts/schema`.
 *
 * ```ts
 * // this will likely be obtained from some existing GraphQLSchema
 * const someUnionType = new GraphQLUnionType({ ...etc });
 *
 * graphql.field({
 *   type: wrap.union(someUnionType),
 *   resolve() {
 *     // ...
 *   },
 * });
 * ```
 */
export declare function union(graphQLType: GraphQLUnionType): UnionType<unknown, unknown>;
/**
 * Wraps an existing {@link GraphQLInterfaceType} into a {@link InterfaceType} so
 * that it can be used in a GraphQL schema built with `@graphql-ts/schema`.
 *
 * ```ts
 * // this will likely be obtained from some existing GraphQLSchema
 * const someInterfaceType = new GraphQLInterfaceType({ ...etc });
 *
 * graphql.field({
 *   type: wrap.interface(someInterfaceType),
 *   resolve() {
 *     // ...
 *   },
 * });
 * ```
 */
declare function interfaceType(graphQLType: GraphQLInterfaceType): InterfaceType<unknown, Record<string, InterfaceField<any, OutputType<unknown>, unknown>>, unknown>;
export { interfaceType as interface };
export { scalar } from "@graphql-ts/schema/api-without-context";
//# sourceMappingURL=wrap.d.ts.map