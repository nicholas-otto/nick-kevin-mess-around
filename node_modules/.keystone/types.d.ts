type Scalars = {
  readonly ID: string;
  readonly Boolean: boolean;
  readonly String: string;
  readonly Int: number;
  readonly Float: number;
  readonly JSON: import("@keystone-6/core/types").JSONValue;
  readonly Decimal: import("@keystone-6/core/types").Decimal | string;
};

export type PageWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
  readonly slug?: Scalars["String"] | null;
};

export type PageWhereInput = {
  readonly AND?: ReadonlyArray<PageWhereInput> | PageWhereInput | null;
  readonly OR?: ReadonlyArray<PageWhereInput> | PageWhereInput | null;
  readonly NOT?: ReadonlyArray<PageWhereInput> | PageWhereInput | null;
  readonly id?: IDFilter | null;
  readonly title?: StringFilter | null;
  readonly slug?: StringFilter | null;
  readonly content?: StringFilter | null;
};

export type IDFilter = {
  readonly equals?: Scalars["ID"] | null;
  readonly in?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly notIn?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly lt?: Scalars["ID"] | null;
  readonly lte?: Scalars["ID"] | null;
  readonly gt?: Scalars["ID"] | null;
  readonly gte?: Scalars["ID"] | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type NestedStringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type PageOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly title?: OrderDirection | null;
  readonly slug?: OrderDirection | null;
  readonly content?: OrderDirection | null;
};

export type OrderDirection =
  | "asc"
  | "desc";

export type PageUpdateInput = {
  readonly title?: Scalars["String"] | null;
  readonly slug?: Scalars["String"] | null;
  readonly content?: Scalars["String"] | null;
};

export type PageUpdateArgs = {
  readonly where: PageWhereUniqueInput;
  readonly data: PageUpdateInput;
};

export type PageCreateInput = {
  readonly title?: Scalars["String"] | null;
  readonly slug?: Scalars["String"] | null;
  readonly content?: Scalars["String"] | null;
};

export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
  | "edit"
  | "hidden";

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | "read"
  | "hidden";

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | "edit"
  | "read"
  | "hidden";

export type QueryMode =
  | "default"
  | "insensitive";

export type KeystoneAdminUISortDirection =
  | "ASC"
  | "DESC";


export declare namespace Lists {
  export type Page = import('@keystone-6/core').ListConfig<Lists.Page.TypeInfo, any>;
  namespace Page {
    export type Item = import('.prisma/client').Page;
    export type TypeInfo = {
      key: "Page";
      fields: "id" | "title" | "slug" | "content"
      item: Item;
      inputs: {
        where: PageWhereInput;
        uniqueWhere: PageWhereUniqueInput;
        create: PageCreateInput;
        update: PageUpdateInput;
        orderBy: PageOrderByInput;
      };
      all: __TypeInfo;
    };
  }
}
export type Context = import('@keystone-6/core/types').KeystoneContext<TypeInfo>;

export type TypeInfo = {
  lists: {
  readonly Page: Lists.Page.TypeInfo;
  };
  prisma: import('.prisma/client').PrismaClient;
};

type __TypeInfo = TypeInfo;

export type Lists = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core').ListConfig<TypeInfo['lists'][Key], any>
} & Record<string, import('@keystone-6/core').ListConfig<any, any>>;
